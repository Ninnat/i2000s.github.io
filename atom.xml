<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Ninnat's Notes</title>
 <link href="/atom.xml" rel="self"/>
 <link href=""/>
 <updated>2017-08-01T15:35:47+00:00</updated>
 <id></id>
 <author>
   <name>Ninnat Dangniam</name>
   <email>truecrimson@gmail.com</email>
 </author>

 
 <entry>
   <title>ขั้นคิดคำนวณแบบควอนตัม</title>
   <link href="/2017/08/01/quantum-algorithms.html"/>
   <updated>2017-08-01T00:00:00+00:00</updated>
   <id>h/2017/08/01/quantum-algorithms</id>
   <content type="html">&lt;h1 id=&quot;อลกอรธมนนสำคญไฉน&quot;&gt;อัลกอริธึมนั้นสำคัญไฉน&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/posts/08-2018/koenigsberg-merian-erben_1652.jpg&quot; style=&quot;width: 628px;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;นี่คือหน้าตาของเมืองเคอนิกสแบร์ก (Königsberg) ในศตวรรษที่ 18 ที่แม่น้ำ Pregel ไหลผ่านตัดแยกตัวเมืองเป็นสี่ผืนดินที่เชื่อมกันด้วยสะพานเจ็ดสะพาน (ก่อนจะเหลือแค่ห้าจากการทิ้งระเบิดสมัยสงครามโลกครั้งที่สอง) ชาวเมืองเคอนิกสแบร์กมักจะใช้เวลาบ่ายวันอาทิตย์เดินชมเมืองอันสวยงามของพวกเขา จนมีคนนึกสนุกตั้งปัญหาขึ้นมาว่าเป็นไปได้ไหมที่จะเดินข้ามสะพานครบทั้งเจ็ดสะพานโดยไม่ข้ามสะพานใดสะพานหนึ่งมากกว่าหนึ่งครั้ง?&lt;/p&gt;
&lt;p&gt;อีกปัญหาที่มีความคล้ายกันมากมาจากเกมที่วิลเลียม โรวัน แฮมิลตัน (William Rowan Hamilton) ชาวไอริชคิดขึ้นในปี 1857 ชื่อว่าเกมไอโคเซียน (Icosian) เป้าหมายของเกมคือการหาเส้นทางเดินบนขอบ (ที่เป็นเส้นหนึ่งมิติ ไม่ใช่หน้า) ของรูปเหลี่ยม 12 หน้า (dodecahedron) ที่ผ่านทุกมุมแต่ไม่ผ่านมุมใดมุมหนึ่งมากกว่าหนึ่งครั้ง&lt;/p&gt;
&lt;p&gt;ในทางคณิตศาสตร์แล้ว ทั้งสองปัญหาคือปัญหาเกี่ยวกับการเดินบนเน็ตเวิร์คซึ่งเป็นโครงสร้างที่ประกอบด้วยเส้นเชื่อม (edge) และโหนด (หรือจุดยอด vertex) เกมไอโคเซียนถามหาเส้นทางเดินบนเน็ตเวิร์คที่ผ่านทุกๆโหนดแต่ไม่ผ่านโหนดใดโหนดหนึ่งมากกว่าหนึ่งครั้ง ในขณะที่ปัญหาสะพานทั้งเจ็ดของเคอนิกสแบร์กถามหาเส้นทางเดินบนเน็ตเวิร์คที่ผ่านทุกๆเส้นเชื่อมแต่ไม่ผ่านเส้นเชื่อมใดเส้นเชื่อมหนึ่งมากกว่าหนึ่งครั้ง&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/posts/08-2018/dodecahedron.png&quot; style=&quot;width: 400px;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;เลออนฮาร์ด ออยเลอร์ (Leonhard Euler) ชาวสวิตเซอร์แลนด์ที่ช่วงนั้นทำงานอยู่ที่เซนต์ ปีเตอร์สเบอร์ก สังเกตว่าปัญหาสะพานทั้งเจ็ดของเคอนิกสแบร์กจะมีคำตอบก็ต่อเมื่อไม่มีโหนดที่มีเส้นออกจากโหนดเป็นจำนวนคี่ หรือถ้ามีก็มีแค่สองโหนด เพราะการผ่านโหนดใดโหนดหนึ่งโดยไม่เดินซ้ำเส้นทางเดิมจะต้องมีทางเข้าทางหนึ่งกับทางออกทางหนึ่ง แต่โหนดเริ่มต้นไม่ต้องมีทางเข้าและโหนดสุดท้ายไม่ต้องมีทางออก คำตอบของออยเลอร์ลึกซึ้งที่ว่ามันไม่ใช่คำตอบของปัญหาสะพานทั้งเจ็ดของเคอนิกสแบร์กปัญหาเดียวแต่เป็นคำตอบของการเดินโดยไม่ซ้ำเส้นทางเดิมบนทุกๆเน็ตเวิร์ค และมันยังบอกขั้นตอนการหาคำตอบหรือ&lt;strong&gt;อัลกอริธึม&lt;/strong&gt; (algorithm) ที่มีประสิทธิภาพสำหรับทุกๆเน็ตเวิร์คโดยการนับจำนวนเส้นเชื่อมที่ออกจากโหนดแต่ละโหนดเท่านั้น&lt;/p&gt;
&lt;p&gt;ทว่าจนถึงทุกวันนี้ยังไม่มีใครรู้อัลกอริธึมเร็วๆสำหรับเกมไอโคเซียนที่ใช้ได้กับทุกๆเน็ตเวิร์ค ซึ่งน่าคิดเพราะเกมไอโคเซียนต่างกับปัญหาสะพานทั้งเจ็ดของเคอนิกสแบร์กเพียงแค่เปลี่ยนเส้นเชื่อมเป็นโหนดเท่านั้นเอง อัลกอริธึมที่ใช้ได้กับทั้งสองปัญหาก็คือลองเดินมันโง่ๆทุกเส้นทางบนเน็ตเวิร์คแล้วดูว่ามีเส้นทางที่เป็นคำตอบไหม แต่วิธีนี้อาจจะต้องใช้เวลาเป็นทวีคูณ (exponential) ของขนาดของเน็ตเวิร์ค จำนวนที่เป็นทวีคูณนี่ใหญ่ขนาดกันนะ?&lt;/p&gt;
&lt;p&gt;ในนิทานเรื่องหนึ่ง พระราชาเรียกผู้ที่คิดเกมหมากรุกได้เป็นคนแรกมาเข้าเฝ้าหวังจะให้รางวัลตอบแทนอย่างยิ่งใหญ่สมกับผลงานของเขา คนผู้นั้นก็ขอรางวัลเป็นข้าวสารหนึ่งเม็ดในช่องแรกของกระดานหมากรุก สองเม็ดในช่องที่สอง สี่เม็ดในช่องที่สาม… เพิ่มขึ้นที่ละสองเท่าตัวๆจนเต็ม 64 ช่องของกระดานหมากรุก พระราชาก็รับปากถึงแม้ในใจจะคิดว่าข้าวสารแค่นี้จะมีค่าสักเท่าไรเชียว จนกระทั่งคนรับใช้กะปริมาณข้าวสารที่ต้องให้&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1,000,000 เม็ดในช่องที่ 20&lt;/li&gt;
&lt;li&gt;1,000,000,000,000 เม็ดในช่องที่ 40&lt;/li&gt;
&lt;li&gt;18,000,000,000,000,000,000 เม็ดในช่องสุดท้ายซึ่งถ้าตีเป็นน้ำหนักก็จะได้ประมาณ 460,000,000 ตัน&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/posts/08-2018/rice-on-chessboard.jpeg&quot; style=&quot;width: 800px;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;บางเวอร์ชันของเรื่องเล่านี้จบลงที่พระราชาสั่งประหารคนผู้นั้นเมื่อรู้ตัวว่าโดนหลอกเข้าให้แล้ว บทเรียนหนึ่งของเรื่องนี้ก็คืออย่าไปกวนตีนคนที่มีอำนาจมากนัก แต่อีกบทเรียนที่สำคัญกว่าก็คือจำนวนที่โตแบบทวีคูณนั้นอาจจะโตเกินจินตนาการของเราได้ ถึงปัญหาจะไม่ใหญ่มาก แต่ถ้ามีแต่อัลกิริธึมที่ต้องใช้เวลาเป็นทวีคูณ ถึงจะใช้ซูเปอร์คอมพิวเตอร์ที่ทำการคำนวณได้กว่า 10 ยกกำลัง 15 ขึ้นตอนในหนึ่งวินาทีก็ยังอาจต้องใช้เวลาเกินอายุปัจจุบันของเอกภพ (13.7 พันล้านปี) จากความรู้ว่าดวงอาทิตย์อยู่ได้อีกแค่ประมาณห้าพันล้านปี อัลกอริธึมที่ช้าจึงไม่ใช่แค่ไม่ทันใจ แต่อาจจะไม่ทันโลกแตกด้วยซ้ำ! ปัญหาที่ต้องใช้เวลาเป็นทวีคูณในการแก้ถือเป็นปัญหาที่&lt;strong&gt;ยาก&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;บตรเครดต-เสยงดนตร-และคอมพวเตอรควอนตม&quot;&gt;บัตรเครดิต, เสียงดนตรี, และคอมพิวเตอร์ควอนตัม&lt;/h1&gt;
&lt;p&gt;ไอเดียของคอมพิวเตอร์ที่อาศัยพฤติกรรมเชิงควอนตัมของสสารในการคำนวณมีมาตั้งแต่ปี 1980 แล้วแต่ในตอนนั้นยังไม่ชัดเจนว่าคอมพิวเตอร์ควอนตัมจะแก้ปัญหายากๆได้เร็วกว่าคอมพิวเตอร์ธรรมดาขนาดไหน จุดเปลี่ยนที่ทำให้คนหันมาสนใจคอมพิวเตอร์ควอนตัมในวงกว้างมาจากวงการที่แทบจะไม่เกี่ยวข้องกับฟิสิกส์เลย: วงการรหัสลับ&lt;/p&gt;
&lt;p&gt;การส่งข้อความลับจะต้องมีกุญแจเข้ารหัส (encrypt) และกุญแจถอดรหัส (decrypt) รหัสลับก่อนสงครามโลกครั้งที่สองมักใช้กุญแจเดียวกันทั้งในการเข้าและถอดรหัส จึงถูกเรียกว่ากุญแจแบบสมมาตร (symmetric key) รหัสแบบนี้สามารถให้ความปลอดภัยอย่างสมบูรณ์แบบได้ในทางทฤษฎีเช่น one-time pad ที่มีกุญแจเป็นข้อความสุ่มมั่วๆเอามาใช้แปลงข้อความจริง ถ้ารู้ข้อความสุ่มนั้นก็จะกู้ข้อความจริงกลับมาได้ แต่กุญแจต้องใช้แล้วทิ้ง ห้ามใช้ซ้ำกัน ตามชื่อว่า one-time (การที่โปรเจ็กต์ VENONA ของ NSA สหรัฐอเมริกาจับตัวสายลับโซเวียตในช่วงสงครามโลกครั้งที่สองได้ก็เชื่อกันว่ามาจากการใช้กุญแจซ้ำของโซเวียตที่มีเหตุจากการเร่งการผลิตกุญแจลับเนื่องจากการบุกของเยอรมัน) ยิ่งข้อความลับยาวกุญแจก็ยิ่งต้องใหญ่ นอกจากนี้การที่ทั้งผู้ส่งและผู้รับจะต้องมีกุญแจเดียวกันก็แปลว่าจะต้องมีการส่งกุญแจกันไปมา ถ้าถูกดักตีหัวขโมยกุญแจก็เสร็จ&lt;/p&gt;
&lt;p&gt;ในปัจจุบันรหัสลับส่วนใหญ่ใช้กุญแจคนละดอกในการเข้าและถอดรหัส โดยกุญแจเข้ารหัสเป็นกุญแจสาธารณะ (public key) ที่ใครๆก็รู้ได้ ระบบแบบนี้ไม่มีทางปลอดภัยอย่างสมบูรณ์แบบเพราะข้อมูลของกุญแจถอดรหัสก็อยู่ในกุญแจเข้ารหัส (ทั้งสองกุญแจมีความสัมพันธ์กันเพราะกุญแจถอดรหัสต้องแก้สิ่งที่กุญแจเข้ารหัสทำ) การค้นพบครั้งสำคัญในวงการรหัสลับคือการใช้ปัญหาการแยกตัวประกอบที่เชื่อว่าไม่มีอัลกอริธึมใดๆในปัจจุบันแก้ได้เร็วพอมาป้องกันการกู้กุญแจถอดรหัสจากกุญแจเข้ารหัส การเข้ารหัสนี้เรียกว่าการเข้ารหัสแบบ RSA มาจากตัวอักษรแรกของชื่อผู้ค้นพบมันในอเมริกา และเป็นระบบการเข้ารหัสที่ใช้กันแพร่หลายในการเข้าเวบอย่างปลอดภัย (https), การป้องกันพาสเวิร์ด, หรือบัตรเครดิต ทุกครั้งที่เราซื้อของออนไลน์ ความปลอดภัยของเราขึ้นอยู่กับ RSA&lt;/p&gt;
ถ้าดูนาฬิกาเป็นก็จะเข้าใจไอเดียของ RSA ได้ สังเกตว่าในการบวก-ลบเวลา เราจะไม่พูดว่า “10 ชั่วโมงหลัง 20 นาฬิกาคือ 30 นาฬิกา” แต่เราจะเริ่มนับส่วนที่เกิน 24 ใหม่ นอกจากบวก-ลบแล้วการคูณหรือการยกกำลังในระบบเลขคณิตแบบนี้ก็เป็นสิ่งที่ทำได้เพราะการคูณคือการบวกซ้ำๆกันและการยกกำลังคือการคูณซ้ำๆกัน ซึ่งคนส่วนใหญ่คงจะไม่เคยทำ แต่ถ้าลองทำดูจะพบสิ่งหนึ่งที่น่าสนใจคือการคูณเลขด้วยตัวมันเองซ้ำๆจะทำให้ย้อนกลับมายังเลขตั้งต้นได้ ตารางด้านล่างเป็นผลคูณ 2 ด้วยตัวมันเองถ้ามี 15 ชั่วโมงในหนึ่งวัน

&lt;p&gt;การเข้ารหัสแบบ RSA แปลงข้อความให้เป็นจำนวนเต็มก่อน เรียกจำนวนนี้ว่า m (message) กุญแจสาธารณะคือจำนวนของ“ชั่วโมง” N และตัวเลข x ที่ทำให้ผู้เข้ารหัสสามารถคำนวณ m ยกกำลัง x ในเลขคณิตแบบนาฬิกาได้ เมื่อถึงมือผู้รับรหัส มีกุญแจลับ y ที่บอกว่าจะต้องยกกำลังต่ออีกเท่าไรจึงจะได้ข้อความ m กลับมา ปรากฎว่าการจะรู้ y ได้จะต้องแยกตัวประกอบของ N ซึ่งเป็นส่วนหนึ่งของกุญแจสาธารณะที่ใครๆก็มี แต่ปัญหาก็คือทุกๆอัลกอริธึมการแยกตัวประกอบที่มีในปัจจุบันต้องใช้เวลาเป็นทวีคูณ การจะถอดรหัส RSA ที่ N เป็นเลขหลายร้อยหลักอาจจะต้องใช้เวลาเป็นล้านปี&lt;/p&gt;
&lt;p&gt;แต่ถ้ามีคอมพิวเตอร์ควอนตัม การแยกตัวประกอบเลขหลายร้อยหลักจะใช้เวลาเพียงไม่กี่วินาที! การเปรียบเทียบนี้สมมติว่าคอมพิวเตอร์ควอนตัมมีความเร็ว CPU พอๆกับของคอมพิวเตอร์ปัจจุบัน สิ่งที่ต่างก็คือคอมพิวเตอร์ควอนตัมมีอัลกอริธึมควอนตัมที่สามารถหาทางลัดในการแก้บางปัญหาได้ การทำงานของอัลกอริธึมควอนตัมแยกตัวประกอบค่อนข้างซับซ้อนแต่หัวใจของมันมาจากการปั่นรวมการยกกำลังในเลขคณิตนาฬิกากับการแปลงฟูเรียร์ (Fourier transform) ให้ผสมกลมกลืนเป็นรสเดียว การแปลงฟูเรียร์เป็นการแตกคลื่นเป็นผลรวมของหลายๆคลื่นที่มีความถี่เฉพาะตัว ไม่ต่างกับการแยกเสียงดนตรีเป็นโน๊ตความถี่ต่างๆ ทำให้สามารถขับหรือลดเสียงของเครื่องดนตรีแต่ละชนิดแยกกันได้ หน้าที่ของการแปลงฟูเรียร์ในอัลกอริธึมควอนตัมคือการหาคาบ (ส่วนกลับของความถี่) ของการยกกำลังในเลขคณิตนาฬิกา เมื่อรู้คาบ — จำนวนครั้งที่ต้องคูณเพื่อให้ได้ค่าเดิมกลับมา — ก็จะทำให้แยกตัวประกอบและรู้ y ได้ จึงทำลายรหัสลับ RSA ได้&lt;/p&gt;
&lt;p&gt;บางปัญหาที่ยากสำหรับคอมพิวเตอร์ธรรมดาเป็นปัญหาที่ง่ายสำหรับคอมพิวเตอร์ควอนตัม นี่เป็นการค้นพบของ ปีเตอร์ ชอร์ (Peter Shor) ชาวอเมริกันในปี 1994 ที่สั่นสะเทือนวงการการถอดรหัสลับและฟิสิกส์ ปัจจุบันยังไม่มีคอมพิวเตอร์ควอนตัมขนาดใหญ่พอที่จะทำแบบนี้ได้ อินส์บรุค (Innsbruck) จับมือกับ MIT เพิ่งจะตีพิมพ์การแยกตัวประกอบ 15 ออกเป็น 3x5 ได้สำเร็จด้วยคอมพิวเตอร์ควอนตัมจิ๋ว 5 อะตอมเมื่อปีที่แล้ว &lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; แต่ก็ไม่ต้องห่วงว่าถ้าทำสำเร็จโลกนี้จะไม่มีความลับอีกต่อไปเพราะนักวิทยาศาสตร์ได้เตรียมรหัสลับต้านทานอัลกอริธึมควอนตัมไว้เรียบร้อยแล้ว (&lt;a href=&quot;https://en.wikipedia.org/wiki/Post-quantum_cryptography&quot;&gt;post-quantum cryptography&lt;/a&gt;)&lt;/p&gt;
&lt;h1 id=&quot;เรขาคณตของอลกอรธมควอนตม&quot;&gt;เรขาคณิตของอัลกอริธึมควอนตัม&lt;/h1&gt;
&lt;p&gt;ความเข้าใจผิดที่ได้ยินกันแพร่หลายมากที่สุดเกี่ยวกับคอมพิวเตอร์ควอนตัมคือคอมพิวเตอร์ควอนตัมเหมือนกับคอมพิวเตอร์ธรรมดาที่ประมวลผลแบบคู่ขนาน แก้ปัญหาโดยการเช็คคำตอบทุกคำตอบที่เป็นไปได้พร้อมๆกัน ซึ่งถ้าทำได้จริงก็จะมหัศจรรย์มาก ไม่ว่าปัญหาใดๆ อัลกอริธึมควอนตัมที่ลองทุกคำตอบก็จะแก้ได้ในหนึ่งขั้นตอนเท่านั้น แต่ความจริงไม่ง่ายแบบนั้น ซึ่งก็อาจจะเป็นเรื่องดีเพราะการเข้ารหัสลับที่ต้านทานอัลกอริธึมควอนตัมก็ต้องอาศัยปัญหาที่ยากสำหรับทั้งอัลกอริธึมธรรมดาและอัลกอริธึมควอนตัม ตัวอย่างที่ดีเยี่ยมในการแสดงให้เห็นการความแตกต่างของการทำงานของอัลกอริธึมธรรมดากับอัลกอริธึมควอนตัมจึงเป็นอัลกอริธึมควอนตัมในการเช็คคำตอบที่ลอฟ โกรเวอร์ (Lov Grover) ชาวอเมริกัน-อินเดีย คิดขึ้นมาในปี 1996 หลังจากชอร์ 2 ปี&lt;/p&gt;
&lt;p&gt;การจะเข้าใจการทำงานของอัลกอริธึมนี้จะต้องรู้พื้นฐานของทฤษฎีควอนตัมเสียก่อนทฤษฎีควอนตัมรวมคณิตศาสตร์ของความน่าจะเป็นกับเรขาคณิต แต่เป็นเรขาคณิตที่มีแต่ทิศทาง ไม่มีระยะทาง (สำหรับคนที่รู้จักเวกเตอร์ จึงไม่ใช่เรขาคณิตของเวกเตอร์เสียทีเดียวเพราะเวกเตอร์มีทั้งขนาดและทิศทาง) ในเรขาคณิตแบบนี้ เหนือกับใต้ถือว่าเป็นทิศเดียวกันเพราะการเดินไปทางเหนือก็คือการเดินไปทางใต้ด้วยระยะทางติดลบ พูดอีกอย่างก็คือมุม 180 องศากลายเป็น 0 องศา (แทนที่ 360 องศาจะเป็น 0 องศา) แต่ความใกล้กันของสองทิศทางก็ยังวัดได้ด้วยมุมที่ไม่เกิน 90 องศา สิ่งที่สำคัญคือยังมีทิศทางที่ตั้งฉากกัน (ทำมุม 90 องศา) นิยามของมิติจึงเหมือนกับในเรขาคณิตปกติ คือจำนวนที่มากที่สุดของทิศทางที่ตั้งฉากกัน เหมือนที่ 3 มิติมีความกว้าง ความยาว และความสูง &lt;a href=&quot;#fn2&quot; class=&quot;footnoteRef&quot; id=&quot;fnref2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ระบบฟิสิกส์ไม่ว่าจะเป็นอะตอม ไอออน ช่องว่างในเพชร หรือวงจรไฟฟ้ายิ่งยวด ที่จะได้เจอในบทถัดๆไปของหนังสือเล่มนี้จะมีสถานะควอนตัม (quantum state) ของมันเองถ้าได้รับการป้องกันอย่างดีพอจากสิ่งรบกวนภายนอกไม่ว่าจะเป็นสนามแม่เหล็กไฟฟ้าหรือความร้อน ซึ่งตามทฤษฎีควอนตัมแล้ว ทิศทางเป็นตัวแทนเชิงคณิตศาสตร์ของสถานะควอนตัม ทิศทางนี้ไม่ใช่ทิศทางจริงๆในทางภูมิศาสตร์ แต่เป็นทิศทางในจำนวนมิติที่ถูกกำหนดโดยฟิสิกส์ของระบบนั้นๆ เช่นสถานะควอนตัมของสปินของอิเล็กตรอนถูกแทนด้วยทิศทางในสองมิติ&lt;/p&gt;
การวัดในทฤษฎีควอนตัมคือการถามระบบฟิสิกส์ว่าสถานะควอนตัมของเธอชี้ไปทางนี้หรือเปล่า? ถ้าทิศที่ถามขนานกับทิศที่มันชี้พอดีก็จะได้คำตอบว่า “ใช่” เสมอ ถ้าทิศที่ถามตั้งฉากกับทิศที่ชี้ก็จะได้คำตอบว่า “ใม่” เสมอ แต่จะเกิดอะไรขึ้นถ้าทิศที่ถามไม่ขนานหรือตั้งฉากเสียทีเดียวล่ะ? ทฤษฎีควอนตัมกำหนดว่าความน่าจะเป็นที่จะได้คำตอบ “ใช่” มีค่าเป็นกำลังสองของโคไซน์ของมุมระหว่างสองทิศนั้น

&lt;p&gt;สมมติว่าปัญหาหนึ่งมีคำตอบที่เป็นไปได้ 4 คำตอบ ปกติแล้วจะต้องเช็คคำตอบทีละคำตอบ จึงเป็นไปได้ว่าจะต้องเช็คถึง 4 ครั้งกว่าจะได้คำตอบที่ถูกต้อง สำหรับคอมพิวเตอร์ควอนตัม 4 คำตอบนี้แทนด้วย 4 ทิศทางที่ตั้งฉากกัน (จึงมี 4 มิติ) การเช็คคำตอบด้วยการวัดก็ไม่ช่วยอะไรเช่นกัน แต่คอมพิวเตอร์ควอนตัมสามารถเช็คคำตอบโดยปราศจากการวัดได้โดยการเก็บคำตอบ “ใช่” หรือ “ไม่ใช่” ไว้กับตัวมันเอง ซึ่งถ้าเราไม่ไปวัดก็จะไม่รู้ ดูเป็นความสามารถที่ไร้ประโยชน์สิ้นดี แต่ทริคของอัลกอริธึมควอนตัมคือการแปลงการเช็คคำตอบแบบหลังไปเป็นการพลิกสถานะควอนตัมที่ขนานกับทิศของคำตอบ ถ้าคำตอบอยู่ในทิศเหนือ-ใต้ (อย่าลืมว่าเป็นทิศเดียวกันในเรขาคณิตแบบควอนตัม) แล้วสถานะควอนตัมชี้ไปทางเหนือ การเช็คคำตอบก็จะพลิกมันมาทางทิศใต้ สถานะควอนตัมที่ชี้ไปทางใต้ก็จะถูกพลิกไปยังทิศเหนือ และปล่อยทิศทางที่ตั้งฉากกับคำตอบไว้คงเดิม ทริคนี้จึงไม่มีผลต่อความน่าจะเป็นของผลการวัดแต่อย่างใด แต่มันทำให้อัลกอริธึมควอนตัมหาหนึ่งในสี่คำตอบที่ถูกต้องเจอจากการเช็ค (พลิก) เพียงหนึ่งครั้งเท่านั้น! เริ่มต้นด้วยทิศที่มีโอกาสได้คำตอบทุกคำตอบเท่าๆกันหมดคือ 1/4 ทิศนี้ทำมุม 60 องศากับคำตอบ s (solution) เพราะว่า &lt;span class=&quot;math&quot;&gt;\(\cos^2 60^{\circ} &amp;amp;= \frac{1}{4}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/posts/08-2018/grover2a.png&quot; style=&quot;width: 327px;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;จากนั้นก็เช็คคำตอบเพื่อพลิกมัน&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/posts/08-2018/grover2b.png&quot; style=&quot;width: 761px;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;แล้วก็พลิกอีกครั้งผ่านทิศตั้งต้นก็จะได้คำตอบที่ถูกต้องด้วยความน่าจะเป็น 100%&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/posts/08-2018/grover2c.png&quot; style=&quot;width: 768px;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;เมื่อคำตอบที่เป็นไปได้มีจำนวนเยอะขึ้น ทิศทางตั้งต้นก็จะอยู่ห่างจากทิศของคำตอบมากขึ้น การพลิกสองสเต็ป (จากการเช็คคำตอบ ตามด้วยการพลิกผ่านทิศตั้งต้น) แต่ละครั้งจะทำให้ขยับเข้าใกล้คำตอบมากขึ้นเรื่อยๆ หากทำการวิเคราะห์ก็จะประมาณได้ว่าจำนวนครั้งที่อัลกอริธึมนี้ต้องเช็คคำตอบคือรากที่สองของจำนวนคำตอบที่เป็นไปได้ &lt;a href=&quot;#fn3&quot; class=&quot;footnoteRef&quot; id=&quot;fnref3&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; ถ้าคอมพิวเตอร์ธรรมดาต้องเช็คคำตอบหนึ่งล้านครั้ง คอมพิวเตอร์ควอนตัมก็จำเป็นต้องเช็คเพียงแค่หนึ่งพันครั้ง ไม่ได้เร็วขึ้นแบบทวีคูณเหมือนอัลกอริธึมแยกตัวประกอบของชอร์แต่ก็ช่วยได้เยอะ&lt;/p&gt;
&lt;p&gt;ในมุมมองหนึ่ง สิ่งที่อัลกอริธึมควอนตัมทำจึงเป็นเพียงการขยับลูกศรไปมา ซึ่งพูดเหมือนง่ายแต่เป็นความท้าทายมาก ถ้าอยากรู้ว่าการควบคุมสถานะควอนตัมนั้นทำกันในแลบได้อย่างไรก็สามารถอ่านบทความที่เขียนและเรียบเรียงโดยนักศึกษาและนักวิทยาศาสตร์ไทยท่านอื่นๆ ได้ใน &lt;a href=&quot;http://www.ebooks.in.th/ebook/45594/&quot;&gt;&lt;em&gt;รูป รส กลิ่น เสียง สัมผัส ไอทีควอนตัม (๓): “คอมพิวเตอร์เชิงควอนตัม”&lt;/em&gt;&lt;/a&gt; ครับ&lt;/p&gt;
&lt;h1 id=&quot;อางอง&quot;&gt;อ้างอิง&lt;/h1&gt;
&lt;p&gt;Cristopher Moore และ Stephen Mertens, “Quantum Computation” ใน &lt;em&gt;The Nature of Computation&lt;/em&gt;, Cambridge University Press (2011).&lt;/p&gt;
&lt;p&gt;Scott Aaronson, “Crypto” ใน &lt;em&gt;Quantum Computing Since Democritus&lt;/em&gt;, Cambridge University Press (2013).&lt;/p&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;Thomas Monz et al., “&lt;a href=&quot;http://science.sciencemag.org/content/351/6277/1068&quot;&gt;Realization of a scalable Shor algorithm&lt;/a&gt;” &lt;em&gt;Science&lt;/em&gt; 351 1068 (2016).&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn2&quot;&gt;&lt;p&gt;สำหรับผู้รู้ทฤษฎีควอนตัม ที่พูดไปไม่ใช่ความจริงทั้งหมดเพราะมุมนี้สามารถเป็นจำนวนเชิงซ้อนได้! แต่ทุกมุมในบทความนี้เป็นจำนวนจริง&lt;a href=&quot;#fnref2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn3&quot;&gt;&lt;p&gt;จริงๆคือ &lt;span class=&quot;math&quot;&gt;\(\pi/4\)&lt;/span&gt; คูณรากที่สองของจำนวนคำตอบที่เป็นไปได้&lt;a href=&quot;#fnref3&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
 </entry>
 
 <entry>
   <title>Adjoint functors</title>
   <link href="/2017/01/26/adjoint-functors.html"/>
   <updated>2017-01-26T00:00:00+00:00</updated>
   <id>h/2017/01/26/adjoint-functors</id>
   <content type="html">&lt;p&gt;Modified: &lt;em&gt;25 May 2017&lt;/em&gt;; Status: &lt;em&gt;completed&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Lately I’ve been thinking about induced representations and the Frobenius reciprocity theorem which have a natural interpretation in terms of adjoint functor in category theory. This post is an introduction to the categorical point of view that I need at the level I’m comfortable with. (You can find better general introductions out there by mathematicians such as &lt;a href=&quot;https://topologicalmusings.wordpress.com/category/math-topics/category-theory/category-theory-for-beginners/&quot;&gt;this 3-parter&lt;/a&gt; by Todd Trimble.)&lt;/p&gt;
&lt;p&gt;To me, one of the most powerful lessons from category theory is that knowing the relations between an object with other objects is as good as knowing the object itself, as the object can be defined by these relations. A lot of time there is a unique (up to a natural isomorphism which doesn’t entail making any arbitrary choice) object that has a “universal” property that can simulate the relations to all other objects of the same kind and so can be thought of as the “best” object of its kind. As a bonus, all of these can be represented by diagrams of objects and arrows. I will give some examples of these on the way but let us first define what categories are.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;category&lt;/strong&gt; &lt;span class=&quot;math&quot;&gt;\(\mathcal{C}\)&lt;/span&gt; is a class of objects and morphisms between them. If &lt;span class=&quot;math&quot;&gt;\(X\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(Y\)&lt;/span&gt; are &lt;strong&gt;objects&lt;/strong&gt; in &lt;span class=&quot;math&quot;&gt;\(\mathcal{C}\)&lt;/span&gt;, the class of &lt;strong&gt;morphisms&lt;/strong&gt; between &lt;span class=&quot;math&quot;&gt;\(X\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(Y\)&lt;/span&gt; is denoted by &lt;span class=&quot;math&quot;&gt;\(\text{Hom}(X,Y)\)&lt;/span&gt;. They are also represented diagrammatically as arrows &lt;span class=&quot;math&quot;&gt;\(f:X \to Y\)&lt;/span&gt; for &lt;span class=&quot;math&quot;&gt;\(f \in \text{Hom}(X,Y)\)&lt;/span&gt;. For &lt;span class=&quot;math&quot;&gt;\(\mathcal{C}\)&lt;/span&gt; to be a category, there must be a unit (identity) morphism and the compositions of morphisms must be associative. Here are some categories.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Set&lt;/strong&gt; of all sets. Since there is no &lt;a href=&quot;https://en.wikipedia.org/wiki/Russell%27s_paradox&quot;&gt;set of all sets&lt;/a&gt;, the word “class” in the definition of a category cannot be replaced by “set”. The morphisms are arbitrary maps between sets.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Grp&lt;/strong&gt; of all groups, &lt;strong&gt;Ring&lt;/strong&gt; of all rings, and &lt;strong&gt;Field&lt;/strong&gt;&lt;span class=&quot;math&quot;&gt;\(_p\)&lt;/span&gt; of all fields with &lt;a href=&quot;https://en.wikipedia.org/wiki/Category_of_rings#Category_of_fields&quot;&gt;characteristic&lt;/a&gt; &lt;span class=&quot;math&quot;&gt;\(p=0\)&lt;/span&gt; or a prime number with the respective homomorphisms as morphisms. (There is no homomorphism between fields of different characteristics.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Top&lt;/strong&gt; of topological spaces with continuous maps as morphisms. In particular, homeomorphisms are isomorphisms.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Man&lt;/strong&gt;&lt;span class=&quot;math&quot;&gt;\(^{\infty}\)&lt;/span&gt; of smooth manifolds with infinitely differentiable maps as morphisms. In particular, diffeomorphisms are isomorphisms.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vec&lt;/strong&gt;&lt;span class=&quot;math&quot;&gt;\(_k\)&lt;/span&gt; of vector spaces over a field &lt;span class=&quot;math&quot;&gt;\(k\)&lt;/span&gt; with linear maps as morphisms.&lt;/li&gt;
&lt;/ul&gt;
My favorite elementary example of uniquely defining an object by morphisms is the construction of a product and a coproduct. A &lt;strong&gt;product&lt;/strong&gt; of &lt;span class=&quot;math&quot;&gt;\(A\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(B\)&lt;/span&gt; is an object &lt;span class=&quot;math&quot;&gt;\(C\)&lt;/span&gt; together with a morphism from &lt;span class=&quot;math&quot;&gt;\(C\)&lt;/span&gt; to &lt;span class=&quot;math&quot;&gt;\(A\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(B\)&lt;/span&gt; such that, if &lt;span class=&quot;math&quot;&gt;\(D\)&lt;/span&gt; is another object also equipped with some morphisms to &lt;span class=&quot;math&quot;&gt;\(A\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(B\)&lt;/span&gt;, then there is a unique morphism from &lt;span class=&quot;math&quot;&gt;\(D\)&lt;/span&gt; to &lt;span class=&quot;math&quot;&gt;\(C\)&lt;/span&gt; such that the following diagram “commutes” (so we call this kind of diagrams commutative diagrams), meaning that every way to compose such morphisms to go from &lt;span class=&quot;math&quot;&gt;\(D\)&lt;/span&gt; to &lt;span class=&quot;math&quot;&gt;\(A\)&lt;/span&gt; or &lt;span class=&quot;math&quot;&gt;\(B\)&lt;/span&gt; gives the same result.
&lt;center&gt;
&lt;img src=&quot;/assets/img/posts/01-2018/product.png&quot; style=&quot;width: 200px;&quot;/&gt;
&lt;/center&gt;
&lt;!-- \begin{align*}
    \xymatrix{
      &amp; D \ar[dl]_{\alpha&#39;}\ar[d]^{\gamma}\ar[dr]^{\beta&#39;} &amp; \\
      A &amp; C\ar[l]^{\alpha}\ar[r]_{\beta} &amp; B
    }
\end{align*} --&gt;
&lt;p&gt;The rational behind this definition is that &lt;span class=&quot;math&quot;&gt;\(C\)&lt;/span&gt; together with the mappings &lt;span class=&quot;math&quot;&gt;\(\alpha\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(\beta\)&lt;/span&gt; is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Universal_property&quot;&gt;best&lt;/a&gt; object that acts as a product of &lt;span class=&quot;math&quot;&gt;\(A\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(B\)&lt;/span&gt; since giving any morphism from any object &lt;span class=&quot;math&quot;&gt;\(D\)&lt;/span&gt; to &lt;span class=&quot;math&quot;&gt;\(A\)&lt;/span&gt; or &lt;span class=&quot;math&quot;&gt;\(B\)&lt;/span&gt; is equivalent to giving &lt;span class=&quot;math&quot;&gt;\(\alpha\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(\beta\)&lt;/span&gt; from &lt;span class=&quot;math&quot;&gt;\(C\)&lt;/span&gt;, so we can just forget about &lt;span class=&quot;math&quot;&gt;\(D\)&lt;/span&gt; altogether and regard &lt;span class=&quot;math&quot;&gt;\(C\)&lt;/span&gt; as a universal simulator of such relations.&lt;/p&gt;
The same diagram with all arrows reversed defines a &lt;strong&gt;coproduct&lt;/strong&gt; &lt;span class=&quot;math&quot;&gt;\(C\)&lt;/span&gt;.
&lt;center&gt;
&lt;img src=&quot;/assets/img/posts/01-2018/coproduct.png&quot; style=&quot;width: 200px;&quot;/&gt;
&lt;/center&gt;
&lt;!-- \begin{align*}
    \xymatrix{
      &amp; D &amp; \\
      A\ar[ur]^{\alpha&#39;}\ar[r]_{\alpha} &amp; C\ar[u]_{\gamma} &amp; B\ar[l]^{\beta}\ar[ul]_{\beta&#39;}
    }
\end{align*} --&gt;
&lt;p&gt;In &lt;strong&gt;Set&lt;/strong&gt;, the product is the direct product &lt;span class=&quot;math&quot;&gt;\(A \times B\)&lt;/span&gt; and the coproduct is the disjoint union &lt;span class=&quot;math&quot;&gt;\(A \amalg B\)&lt;/span&gt;. We will just verify the first statement to familiarize ourselves with the meaning of the diagrams. For the direct product &lt;span class=&quot;math&quot;&gt;\(C=A \times B\)&lt;/span&gt;, a natural choice for the mappings &lt;span class=&quot;math&quot;&gt;\(\alpha\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(\beta\)&lt;/span&gt; is the projection &lt;span class=&quot;math&quot;&gt;\[ \begin{aligned}
\alpha(a,b) = a, &amp;amp;&amp;amp; \beta(a,b) = b.
\end{aligned} \]&lt;/span&gt; We have to show that, for any &lt;span class=&quot;math&quot;&gt;\(\alpha&amp;#39;\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(\beta&amp;#39;\)&lt;/span&gt; from a set &lt;span class=&quot;math&quot;&gt;\(D\)&lt;/span&gt;, there is a morphism &lt;span class=&quot;math&quot;&gt;\(\gamma\)&lt;/span&gt; from &lt;span class=&quot;math&quot;&gt;\(D\)&lt;/span&gt; to &lt;span class=&quot;math&quot;&gt;\(C\)&lt;/span&gt; that makes the diagram commutes and uniquely so. Obviously, for &lt;span class=&quot;math&quot;&gt;\(d\in D\)&lt;/span&gt;, this map is &lt;span class=&quot;math&quot;&gt;\[ \begin{aligned}
\gamma(d) = (\alpha&amp;#39;(d),\beta&amp;#39;(d)),
\end{aligned} \]&lt;/span&gt; If there is another map &lt;span class=&quot;math&quot;&gt;\(\gamma&amp;#39;\)&lt;/span&gt; from &lt;span class=&quot;math&quot;&gt;\(D\)&lt;/span&gt; to &lt;span class=&quot;math&quot;&gt;\(C\)&lt;/span&gt; that makes the diagram commutes, it must sends &lt;span class=&quot;math&quot;&gt;\(d\)&lt;/span&gt; to an element of &lt;span class=&quot;math&quot;&gt;\(A \times B\)&lt;/span&gt; that projects to &lt;span class=&quot;math&quot;&gt;\(\alpha&amp;#39;(d)\)&lt;/span&gt; on &lt;span class=&quot;math&quot;&gt;\(A\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(\beta&amp;#39;(d)\)&lt;/span&gt; on &lt;span class=&quot;math&quot;&gt;\(B\)&lt;/span&gt;. But that element is none other than &lt;span class=&quot;math&quot;&gt;\((\alpha&amp;#39;(d),\beta&amp;#39;(d))\)&lt;/span&gt;. Thus, the uniqueness is established. For the disjoint union &lt;span class=&quot;math&quot;&gt;\(C = A \amalg B\)&lt;/span&gt;, a natural choice for the mappings &lt;span class=&quot;math&quot;&gt;\(\alpha\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(\beta\)&lt;/span&gt; is the embedding of &lt;span class=&quot;math&quot;&gt;\(A\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(B\)&lt;/span&gt; into the union. Then the proof proceeds in the same manner by making obvious choices and following the arrows around (“diagram chasing”).&lt;/p&gt;
&lt;p&gt;We can ask if the direct product and the direct sum of sets are the only product and coproduct objects in &lt;strong&gt;Set&lt;/strong&gt;. The nice answer is that they are. And this is not only true in &lt;strong&gt;Set&lt;/strong&gt; but also in a general category as well. We will not prove that here but it amounts to using the definition of a product or a coproduct and do some more diagram chasing.&lt;/p&gt;
&lt;p&gt;Why going so far to define something that should reduce to the notion of a product in any category? Well, this construction guides us when it is not clear what the right structure of the product is. This is the case in the category &lt;strong&gt;Top&lt;/strong&gt; of all topological spaces, which &lt;a href=&quot;https://topologicalmusings.wordpress.com/2008/06/22/basic-category-theory-i/&quot;&gt;Todd Trimble&lt;/a&gt; gives as an example and to which I will not go into since it is new to me so I would just be regurgitating what Todd already said better.&lt;/p&gt;
&lt;h2 id=&quot;functors&quot;&gt;Functors&lt;/h2&gt;
&lt;p&gt;Suppose that &lt;span class=&quot;math&quot;&gt;\(\mathcal{C}\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(\mathcal{D}\)&lt;/span&gt; are two categories and &lt;span class=&quot;math&quot;&gt;\(X,Y \in \mathcal{C}\)&lt;/span&gt;. A (covariant) &lt;strong&gt;functor&lt;/strong&gt; &lt;span class=&quot;math&quot;&gt;\(F\)&lt;/span&gt; is a map (of both objects and morphisms) &lt;span class=&quot;math&quot;&gt;\(F: \mathcal{C} \to \mathcal{D}\)&lt;/span&gt; such that &lt;span class=&quot;math&quot;&gt;\(\text{Hom}(X,Y) \to \text{Hom}(F(X) , F(Y))\)&lt;/span&gt; preserves identity morphisms and compositions.&lt;/p&gt;
&lt;p&gt;One of the most trivial kinds of functors are ones that simply throw away information. The &lt;strong&gt;forgetful functor&lt;/strong&gt; &lt;strong&gt;Grp&lt;/strong&gt; &lt;span class=&quot;math&quot;&gt;\(\to\)&lt;/span&gt; &lt;strong&gt;Set&lt;/strong&gt; sends a group to its underlying set; it completely forgets the group structure. There are also functors that are partially forgetful such as the functor from &lt;strong&gt;Grp&lt;/strong&gt; to &lt;strong&gt;Ab&lt;/strong&gt; the category of all abelian groups which set &lt;span class=&quot;math&quot;&gt;\(ab=ba\)&lt;/span&gt; for all elements &lt;span class=&quot;math&quot;&gt;\(a,b\)&lt;/span&gt; in a group.&lt;/p&gt;
More interesting is the &lt;strong&gt;free functor&lt;/strong&gt; &lt;span class=&quot;math&quot;&gt;\(F:\)&lt;/span&gt; &lt;strong&gt;Set&lt;/strong&gt; &lt;span class=&quot;math&quot;&gt;\(\to\)&lt;/span&gt; &lt;strong&gt;Grp&lt;/strong&gt; sending a set to the “&lt;a href=&quot;https://en.wikipedia.org/wiki/Free_group&quot;&gt;free group&lt;/a&gt;”. For a set &lt;span class=&quot;math&quot;&gt;\(S\)&lt;/span&gt;, &lt;span class=&quot;math&quot;&gt;\(F(S)\)&lt;/span&gt; is the set of all expressions (“words”) that can be composed from elements of &lt;span class=&quot;math&quot;&gt;\(S\)&lt;/span&gt;: every power and inverse of each and every element and (noncommutative) products of them; it is the least constrained group that can be built from elements of &lt;span class=&quot;math&quot;&gt;\(S\)&lt;/span&gt; as generators. The categorical way to say this is that the free functor has the universal property that any map &lt;span class=&quot;math&quot;&gt;\(\sigma\)&lt;/span&gt; from &lt;span class=&quot;math&quot;&gt;\(S\)&lt;/span&gt; to some group &lt;span class=&quot;math&quot;&gt;\(G\)&lt;/span&gt; factors through the free group &lt;span class=&quot;math&quot;&gt;\(F(S)\)&lt;/span&gt; with a unique group homomorphism &lt;span class=&quot;math&quot;&gt;\(\varphi\)&lt;/span&gt;.
&lt;center&gt;
&lt;img src=&quot;/assets/img/posts/01-2018/free-group.png&quot; style=&quot;width: 150px;&quot;/&gt;
&lt;/center&gt;
&lt;!-- \begin{align*}
    \xymatrix{
      S \ar[r]\ar[dr]_{\sigma} &amp; F(S) \ar[d]^{\varphi} \\
      &amp; G
    }
\end{align*} --&gt;

&lt;p&gt;For a given group, the forgetful functor sends it to a particular set, and for a given set, the free functor sends it to a particular group. So they are in some sense inverse functors to each other even though the categories &lt;strong&gt;Set&lt;/strong&gt; and &lt;strong&gt;Grp&lt;/strong&gt; are clearly not the same. This concept of a generalized inverse is formalized in the notion of an adjoint functor.&lt;/p&gt;
Functors &lt;span class=&quot;math&quot;&gt;\(F: \mathcal{C} \to \mathcal{D}\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(G: \mathcal{D} \to \mathcal{C}\)&lt;/span&gt; are &lt;strong&gt;adjoint functors&lt;/strong&gt; if for any &lt;span class=&quot;math&quot;&gt;\(X \in \mathcal{C}\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(Y \in \mathcal{D}\)&lt;/span&gt;, there is an &lt;a href=&quot;https://en.wikipedia.org/wiki/Adjoint_functors#Hom-set_adjunction&quot;&gt;isomorphism&lt;/a&gt;
&lt;center&gt;
&lt;img src=&quot;/assets/img/posts/01-2018/adjoint.png&quot; style=&quot;width: 180px;&quot;/&gt;
&lt;/center&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[ \begin{aligned}
\text{Hom}_{\mathcal{D}} (F(X),Y) \simeq \text{Hom}_{\mathcal{C}} (X,G(Y)).
\end{aligned} \]&lt;/span&gt; &lt;!-- \begin{align*}
    \xymatrix{
      F(X)\ar[r]^{\text{Hom}_{\mathcal{D}}(F(X),Y)} &amp; Y\ar[d] \\
      X\ar[u]\ar[r]_{\text{Hom}_{\mathcal{C}}(X,G(Y))} &amp; G(Y)
    }
\end{align*} --&gt; &lt;span class=&quot;math&quot;&gt;\(F\)&lt;/span&gt; is called a &lt;strong&gt;left adjoint&lt;/strong&gt; of &lt;span class=&quot;math&quot;&gt;\(G\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(G\)&lt;/span&gt; is called a &lt;strong&gt;right adjoint&lt;/strong&gt; of &lt;span class=&quot;math&quot;&gt;\(F\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Why should this be true in the case of the forgetful functor &lt;span class=&quot;math&quot;&gt;\(E\)&lt;/span&gt; and the free functor &lt;span class=&quot;math&quot;&gt;\(F\)&lt;/span&gt; between &lt;strong&gt;Set&lt;/strong&gt; and &lt;strong&gt;Grp&lt;/strong&gt;? A group homomorphism &lt;span class=&quot;math&quot;&gt;\(\varphi :F(S) \to G\)&lt;/span&gt; is completely determined if we know what it does to each element of &lt;span class=&quot;math&quot;&gt;\(S\)&lt;/span&gt;. In other words, what &lt;span class=&quot;math&quot;&gt;\(\varphi\)&lt;/span&gt; really acts on is the underlying set of &lt;span class=&quot;math&quot;&gt;\(G\)&lt;/span&gt;. That is, giving &lt;span class=&quot;math&quot;&gt;\(\varphi\)&lt;/span&gt; is equivalent to giving &lt;span class=&quot;math&quot;&gt;\(\psi : S \to E(G)\)&lt;/span&gt;. &lt;span class=&quot;math&quot;&gt;\[ \begin{aligned}
\text{Hom}_{\textbf{Grp}} (F(S),G) \simeq \text{Hom}_{\textbf{Set}} (S,E(G))
\end{aligned} \]&lt;/span&gt; so that the free functor is a left adjoint of the forgetful functor.&lt;/p&gt;
&lt;!-- A deep understanding of adjoint functors seem to require knowing about representability of functors and Yoneda&#39;s lemma, neither of which I can competently explain. But they all have analogs in linear algebra by pretending that an inner product $\braket{v,u}$ is a morphism $\text{Hom}(v,u)$ in a category with one object $V$ (with linear maps between vector spaces as functors). [^1]. A functor $F:\mathcal{C} \to $**Set** is **representable** by $X \in \mathcal{C}$ if the functor can be concretely realized as the morphism Hom$_{\mathcal{C}}(X,\cdot)$. The **Yoneda&#39;s lemma** guarantees that this $X$ is unique. In this analogy, the representability of $F$ combined with the Yoneda&#39;s lemma has the same content as the [Riesz representation theorem](https://en.wikipedia.org/wiki/Riesz_representation_theorem) in linear algebra. It says that a continuous linear functional $f:V \to k$, where $k$ is now the analog of **Set**, can be identified as a unique vector in $v \in V$ itself via the inner product
$$ \begin{aligned}
f (u) = \braket{v,u}.
\end{aligned} $$
Now consider the linear functional $v \mapsto \braket{L(v),u}$. By the representation theorem, there is $w \in V$ that realizes this map as $\braket{v,w}$. This is an image of the adjoint operator $w = L^*(u)$. By a similar argument, if $F$ and $G$ are adjoint functors
$$ \begin{aligned}
\text{Hom}_{\mathcal{D}} (F(X),Y) \simeq \text{Hom}_{\mathcal{C}} (X,G(Y)),
\end{aligned} $$
and the classes of morphisms are sets (which they usually are), the functor $Y \mapsto \text{Hom}_{\mathcal{C}} (X,G(Y))$ is represented by $F(X)$ and the functor $X \mapsto \text{Hom}_{\mathcal{D}} (F(X),Y)$ is represented by $F(Y)$, so they are unique by the Yoneda&#39;s lemma. A further analogy is that an adjoint functor may not exist, but if it exists, it is unique. --&gt;

&lt;p&gt;In representation theory, a restriction of a representation of a group &lt;span class=&quot;math&quot;&gt;\(G\)&lt;/span&gt; to a subgroup &lt;span class=&quot;math&quot;&gt;\(H\)&lt;/span&gt; is a functor whose left adjoint is the induction of a representation of &lt;span class=&quot;math&quot;&gt;\(H\)&lt;/span&gt; to a “free” representation of &lt;span class=&quot;math&quot;&gt;\(G\)&lt;/span&gt;. There, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Induced_representation&quot;&gt;Frobenius reciprocity theorem&lt;/a&gt; is nothing but the property of adjoint functors. I will talk about how this can be used to deduce the well known fact that each irreducible representation of SO(3) appears only once in the decomposition of functions on a sphere.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ควอนตัมฟิสิกส์สำหรับทารก</title>
   <link href="/2016/12/27/quantum-for-babies.html"/>
   <updated>2016-12-27T00:00:00+00:00</updated>
   <id>h/2016/12/27/quantum-for-babies</id>
   <content type="html">&lt;p&gt;อาจจะเคยเห็นหนังสือ &lt;em&gt;Quantum Physics for Babies&lt;/em&gt; ที่ Mark Zuckerberg อ่านให้ลูกฟัง&lt;/p&gt;
&lt;center&gt;
&lt;img src=&quot;/assets/img/posts/zuckerberg.jpg&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;หรือที่ “Antman” Paul Rudd ใช้เป็นที่พึ่งเพื่อหาวิธีเอาชนะ Stephen Hawking ในเกมหมากรุกควอนตัม&lt;/p&gt;
&lt;center&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Hi0BzqV_b44?t=5m4s&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;

&lt;p&gt;&lt;em&gt;Quantum Physics for Babies&lt;/em&gt; เป็นหนังสือที่ &lt;a href=&quot;https://csferrie.com/&quot;&gt;Chris Ferrie&lt;/a&gt; เขียนขึ้นมาให้ลูกของเขาเองระหว่างที่ทำงานเป็นโพสต์ด็อก(นักวิจัยหลังปริญญาเอก)ที่ University of New Mexico และเรียนรู้วิธี&lt;a href=&quot;https://csferrie.com/2016/11/19/quantum-physics-for-babies/&quot;&gt;ตีพิมพ์ด้วยตนเอง&lt;/a&gt; (เพราะจะได้เล่มตัวอย่างฟรี ถูกกว่าทำเล่มเอง) แล้วดันฮิตติดชาร์ทขึ้นมา คนขอเอาไปแปลเป็นภาษาจีน ภาษาเวียตนาม คราวนี้มีคนไทยคนหนึ่งทำงานร่วมกับเขาที่นิวเม็กซิโก &lt;em&gt;ควอนตัมฟิสิกส์สำหรับทารก&lt;/em&gt;ฉบับภาษาไทยจึงถือกำเนิดขึ้น&lt;/p&gt;
&lt;center&gt;
&lt;blockquote class=&quot;imgur-embed-pub&quot; lang=&quot;en&quot; data-id=&quot;a/D7MlQ&quot;&gt;
&lt;a href=&quot;//imgur.com/D7MlQ&quot;&gt;Quantum Physics for Babies (THAI)&lt;/a&gt;
&lt;/blockquote&gt;&lt;script async src=&quot;//s.imgur.com/min/embed.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/center&gt;

&lt;p&gt;คริสมอบสิทธิ์เกี่ยวกับ&lt;em&gt;ควอนตัมฟิสิกส์สำหรับทารก&lt;/em&gt;ฉบับภาษาไทยทั้งหมดให้กับผม (ผู้แปล) จะเอาไปให้สำนักพิมพ์ก็ได้ ถ้าหาสำนักพิมพ์ไม่ได้จะเอาไปแจกฟรีก็ได้ หลังจากรอคำตอบจากคนรู้จักที่ติดต่อให้ช่วยหาสำนักพิมพ์มาพักใหญ่ๆ ผมก็คิดว่าถึงเวลาเอามาแจกฟรีเป็นของขวัญปีใหม่ได้แล้ว สามารถดาวน์โหลดได้เลยที่&lt;a href=&quot;https://github.com/Ninnat/quantum_physics_for_babies_THAI/releases&quot;&gt;ลิงค์นี้&lt;/a&gt; จะเอาไปปรินต์, ดัดแปลง, แชร์ไฟล์นี้หรือไฟล์ที่ได้รับการดัดแปลงให้ลูกเล็กเด็กแดงก็ได้เลยตามสบาย แต่ไม่อนุญาตให้นำไปใช้ทางการค้าและต้องให้เครดิตกับคริสและผม (นินนาท แดงเนียม) เสมอ&lt;/p&gt;
&lt;p&gt;สวัสดีปีใหม่ครับ&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>First Post</title>
   <link href="/2016/07/20/first-post.html"/>
   <updated>2016-07-20T00:00:00+00:00</updated>
   <id>h/2016/07/20/first-post</id>
   <content type="html">&lt;p&gt;Modified: &lt;em&gt;3 Jan 2017&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;First post on my Jekyll-powered blog!&lt;/p&gt;
&lt;p&gt;I’ve been blogging on &lt;a href=&quot;https://ninnatdangniam.wordpress.com/&quot;&gt;Wordpress&lt;/a&gt; for a long time (in Thai) but despite how easy it is to setup the blog, there isn’t much I can do without paying. Now you can follow &lt;a href=&quot;https://ninnat.github.io/README.html&quot;&gt;what I did&lt;/a&gt; and get your own blog hosted on a free (public) Git repository.&lt;/p&gt;
&lt;p&gt;Finding a blog that functions without a hassle is even harder if you are a math blogger, but that is not a problem here. Equations are written in &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; and displayed using &lt;a href=&quot;https://www.mathjax.org/&quot;&gt;MathJax&lt;/a&gt;. Math in a paragraph (in-line math) is delimited by &lt;code&gt;$...$&lt;/code&gt;, while displaying math in its own paragraph uses &lt;code&gt;$$...$$&lt;/code&gt;. Use &lt;code&gt;\begin{aligned}...\end{aligned}&lt;/code&gt; for aligned equations and &lt;code&gt;\begin{aligned}...\end{aligned}&lt;/code&gt; for numbered aligned equations. (Both delimiters have to be placed inside &lt;code&gt;$$...$$&lt;/code&gt;.) A quick guide on MathJax syntax can be found &lt;a href=&quot;http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s test this by writing the Maxwell’s equations in cgs units:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[
\begin{align}
\nabla \cdot \mathbf{E} &amp;amp;= 4\pi \rho , \\
\nabla \times \mathbf{E} &amp;amp;= -\frac{1}{c} \frac{\partial \mathbf{B}}{\partial t} , \\
\nabla \cdot \mathbf{B} &amp;amp;= 0, \\
\nabla \times \mathbf{B} &amp;amp;= \frac{4\pi}{c} \mathbf{J} + \frac{1}{c} \frac{\partial \mathbf{E}}{\partial t}.
\end{align}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Another indispensable feature that I’ve always longed for is the popup footnote. Digital footnotes today are often still implemented as if they are in print media. You follow the link to the bottom of the post and then have to find a way back to where you were in the main text, thus breaking the flow of reading. (And maybe it’s just me but it’s tempting to take a peek at footnotes even when I know they aren’t necessary to the main text.) A much better way to implement a digital footnote is using, for example, &lt;a href=&quot;http://www.bigfootjs.com/&quot;&gt;Bigfoot&lt;/a&gt; like this. &lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; All you have to do is pasting the css into &lt;code&gt;/assets/css/style.css&lt;/code&gt;, putting the javascript file to, say, &lt;code&gt;/assets/js&lt;/code&gt; and calling it with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;/assets/js/bigfoot.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    $.bigfoot({
        activateCallback: function($popover, $button) {
                if (MathJax &amp;amp;&amp;amp; !$button.data(&amp;#39;mathjax-processed&amp;#39;)) {
                        var content_wrapper = $popover.find(&amp;#39;.bigfoot-footnote__content&amp;#39;)[0];
                        MathJax.Hub.Queue([&amp;#39;Typeset&amp;#39;, MathJax.Hub, content_wrapper]);
                        MathJax.Hub.Queue(function () {
                                $button.attr(&amp;#39;data-bigfoot-footnote&amp;#39;, content_wrapper.innerHTML);
                                $button.data(&amp;#39;mathjax-processed&amp;#39;, true);
                        });
                }
        }
    });
&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;within &lt;code&gt;/_includes/javascript.html&lt;/code&gt;. This code, created by &lt;a href=&quot;https://esham.io/2014/07/mathjax-and-bigfoot&quot;&gt;Benjamin Esham&lt;/a&gt;, enables MathJax in the footnote. You also have the option to show or hide footnotes in the footer. I decide to show it for searchability.&lt;/p&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;Alan Jacobs, &lt;a href=&quot;http://www.theatlantic.com/technology/archive/2012/03/the-technology-of-a-better-footnote/254403/&quot;&gt;“The Technology of a Better Footnote,”&lt;/a&gt; &lt;em&gt;The Atlantic&lt;/em&gt;, March 2012.&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
 </entry>
 
 
</feed>
