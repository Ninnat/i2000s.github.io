<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Schur's Lemming</title>
 <link href="/atom.xml" rel="self"/>
 <link href=""/>
 <updated>2018-11-04T08:03:23+00:00</updated>
 <id></id>
 <author>
   <name>Ninnat Dangniam</name>
   <email>truecrimson@gmail.com</email>
 </author>

 
 <entry>
   <title>อัลกอริธึมของชอร์ (ยังเขียนไม่เสร็จ)</title>
   <link href="/shor.html"/>
   <updated>2018-11-03T00:00:00+00:00</updated>
   <id>h/shor</id>
   <content type="html">&lt;p&gt;
&lt;center&gt;
&lt;img src=&quot;/assets/img/posts/2018/summer-wars-shor.png&quot; /&gt;
&lt;/center&gt;
&lt;center&gt;
&lt;em&gt;Kenji, meets Shor. Shor, meets Kenji.&lt;/em&gt;
&lt;/center&gt;
&lt;/p&gt;

&lt;p&gt;อัลกอริธึมแยกตัวประกอบเป็นแอปพลิเคชันของคอมพิวเตอร์ควอนตัมที่สำคัญที่สุดหรือเปล่า? ส่วนตัวผมคิดว่าการจำลองระบบควอนตัมจะส่งผลกระทบที่ยิ่งใหญ่กว่าต่อวิทยาศาสตร์และสังคม แต่การทำลายระบบความปลอดภัย RSA เป็นเรื่องที่ถูกถามบ่อยที่สุดก็เลยอยากจะเขียนเอาไว้หน่อย (มี&lt;a href=&quot;https://khunpanya.wordpress.com/2016/07/31/shors-algorithm/&quot;&gt;บล็อก&lt;/a&gt;ของคุณปัญญาอีกบล็อกที่เขียนเรื่องอัลกอริธึมนี้)&lt;/p&gt;
ก่อนอื่นเลย อัลกอริธึมแยกตัวประกอบของชอร์เป็นอัลกอริธึมหาคาบ (period finding) ของฟังก์ชันประเภทหนึ่ง ดังนั้นเราต้องมาเข้าใจกันก่อนว่าปัญหาการทำลายระบบ RSA และการแยกตัวประกอบลดรูปไปเป็นการหาคาบได้อย่างไร ซึ่งความเข้าใจส่วนนี้ไม่เกี่ยวกับควอนตัมเลย เป็นทฤษฎีจำนวนล้วนๆ ตอนก่อนจะมาเรียนฟิสิกส์ผมเคยบอกเพื่อนภาคคณิตศาสตร์ว่าชีวิตนี้จะไม่แตะทฤษฎีจำนวนอีกแล้วแต่การคำนวณเชิงควอนตัมทำให้ผมต้องผิดคำพูด (แต่เดี๋ยวก็จะเห็นว่ามันเป็นทฤษฎีกรุ๊ปเสียส่วนใหญ่) ในส่วนแรกของโพสท์นี้เราจะลดรูปปัญหาทีละขั้นๆดังนี้
&lt;p&gt;
&lt;center&gt;
ทำลายระบบ RSA ≤ หา totient function ≤ แยกตัวประกอบ ≤ หารากที่สองที่ไม่ชัดของ 1 ≤ หาคาบ
&lt;/center&gt;
&lt;/p&gt;

&lt;p&gt;โดย A ≤ B หมายความคร่าวๆว่าถ้าแก้ B ได้ก็แก้ A ได้ใน polynomial time (ทำลายระบบ RSA ≥ แยกตัวประกอบ)&lt;/p&gt;
&lt;h2 id=&quot;ทำลายระบบ-rsa-ดวยการแยกตวประกอบ&quot;&gt;ทำลายระบบ RSA ด้วยการแยกตัวประกอบ&lt;/h2&gt;
&lt;p&gt;ใน&lt;a href=&quot;https://ninnat.github.io/quantum-algorithms.html&quot;&gt;โพสท์ที่แล้ว&lt;/a&gt;ผมอธิบายการทำงานของรหัส RSA ไว้อย่างคร่าวๆ ไม่ได้ใช้สมการ แตในโพสท์นี้ไม่ใช้ไม่ได้แล้ว ให้ &lt;span class=&quot;math&quot;&gt;\(m\)&lt;/span&gt; เป็นข้อความ (message), &lt;span class=&quot;math&quot;&gt;\(e\)&lt;/span&gt; เป็นกุญแจเข้ารหัสลับ (encryption key), และ &lt;span class=&quot;math&quot;&gt;\(d\)&lt;/span&gt; เป็นกุญแจถอดรหัส (decryption key) ระบบ RSA เข้ารหัสด้วยการเลือกจำนวนเต็ม &lt;span class=&quot;math&quot;&gt;\(N\)&lt;/span&gt; และคำนวณ &lt;span class=&quot;math&quot;&gt;\(m\)&lt;/span&gt; ยกกำลัง &lt;span class=&quot;math&quot;&gt;\(e\)&lt;/span&gt; ในเลขคณิตนาฬิกา &lt;span class=&quot;math&quot;&gt;\[ f(m) \equiv m^e \mod N \]&lt;/span&gt; ส่วนการถอดรหัสทำโดยยกกำลังอีกครั้งจนได้ข้อความเดิมกลับมา &lt;span class=&quot;math&quot;&gt;\[ (m^e)^d = m^{ed} \equiv m \mod N \]&lt;/span&gt; ในการ&lt;a href=&quot;https://ninnat.github.io/quantum-algorithms.html&quot;&gt;เข้ารหัสด้วยกุญแจสาธารณะ&lt;/a&gt; (public key cryptography) ทุกๆคนมีสิทธิ์ที่จะรู้ &lt;span class=&quot;math&quot;&gt;\(e\)&lt;/span&gt; และ &lt;span class=&quot;math&quot;&gt;\(N\)&lt;/span&gt; แต่ผู้รับสาส์นเท่านั้นที่จะมีกุญแจถอดรหัส &lt;span class=&quot;math&quot;&gt;\(d\)&lt;/span&gt; เตรียมอยู่แล้ว ดังนั้นคำถามของนักแฮกก็คือเราจะคำนวณ &lt;span class=&quot;math&quot;&gt;\(d\)&lt;/span&gt; จาก &lt;span class=&quot;math&quot;&gt;\(e\)&lt;/span&gt; และ &lt;span class=&quot;math&quot;&gt;\(N\)&lt;/span&gt; ได้อย่างไร? &lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ปรากฏว่าถ้าเราแยกตัวประกอบได้ เราก็หาค่า &lt;span class=&quot;math&quot;&gt;\(M\)&lt;/span&gt; ที่ทำให้ &lt;span class=&quot;math&quot;&gt;\[ ed \equiv 1 \mod M \]&lt;/span&gt; ได้ ยกตัวอย่างเช่น เมื่อ &lt;span class=&quot;math&quot;&gt;\(N\)&lt;/span&gt; เป็นผลคูณของจำนวนเฉพาะแค่สองจำนวน &lt;span class=&quot;math&quot;&gt;\(N=pq\)&lt;/span&gt; ค่าของ &lt;span class=&quot;math&quot;&gt;\(M\)&lt;/span&gt; คือ &lt;span class=&quot;math&quot;&gt;\((p-1)(q-1)\)&lt;/span&gt; แล้วเราก็หาอินเวอร์สการคูณของ &lt;span class=&quot;math&quot;&gt;\(e\)&lt;/span&gt; ใน &lt;span class=&quot;math&quot;&gt;\(\text{mod}\,M\)&lt;/span&gt; ด้วย&lt;a href=&quot;https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Computing_multiplicative_inverses_in_modular_structures&quot;&gt;อัลกอริธึมของยูคลิด&lt;/a&gt; ได้ &lt;span class=&quot;math&quot;&gt;\(d\)&lt;/span&gt; ออกมา ปัญหาการทำลายระบบ RSA จึงสามารถลดรูปเป็นปัญหาการแยกตัวประกอบได้ &lt;a href=&quot;#fn2&quot; class=&quot;footnoteRef&quot; id=&quot;fnref2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ถ้าต้องการหาค่า &lt;span class=&quot;math&quot;&gt;\(M\)&lt;/span&gt; โดยทั่วไป มันคือ &lt;a href=&quot;https://en.wikipedia.org/wiki/Euler%27s_totient_function&quot;&gt;totient function&lt;/a&gt; &lt;span class=&quot;math&quot;&gt;\(\varphi(N)\)&lt;/span&gt; ของออยเลอร์ (Euler) ซึ่งผมแอบซ่อนรายละเอียดเอาไว้ด้านล่าง สามารถคลิกลูกศรเพื่อเปิดดูได้&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;details&gt;&lt;summary&gt;&lt;strong&gt;การหาค่าของ &lt;span class=&quot;math&quot;&gt;\(M\)&lt;/span&gt;: &lt;span class=&quot;math&quot;&gt;\(N\)&lt;/span&gt; เป็นจำนวนเฉพาะ&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;

การคำนวณ totient function เป็น generalization ของ&lt;a href=&quot;https://en.wikipedia.org/wiki/Fermat%27s_little_theorem&quot;&gt;ทฤษฎีบทน้อยๆของแฟร์มา&lt;/a&gt; (Fermat’s little theorem): เมื่อ &lt;span class=&quot;math&quot;&gt;\(p\)&lt;/span&gt; เป็นจำนวนเฉพาะและ &lt;span class=&quot;math&quot;&gt;\(a\)&lt;/span&gt; กับ &lt;span class=&quot;math&quot;&gt;\(p\)&lt;/span&gt; เป็น coprime (ห.ร.ม.=1) &lt;span class=&quot;math&quot;&gt;\[ a^{p-1} \equiv 1 \mod p \]&lt;/span&gt; ทฤษฎีบทนี้&lt;a href=&quot;https://en.wikipedia.org/wiki/Proofs_of_Fermat%27s_little_theorem&quot;&gt;พิสูจน์&lt;/a&gt; ได้ด้วยทฤษฎีกรุ๊ป จำนวนใน &lt;span class=&quot;math&quot;&gt;\(\mathbb{Z}_p\)&lt;/span&gt; ที่มีอินเวอร์การคูณประกอบกันเป็น cyclic group &lt;span class=&quot;math&quot;&gt;\(\mathbb{Z}_p^*\)&lt;/span&gt; ซึ่งมีขนาด &lt;span class=&quot;math&quot;&gt;\(p-1\)&lt;/span&gt; (เพราะจำนวนทุกจำนวนที่เป็น coprime กับ &lt;span class=&quot;math&quot;&gt;\(p\)&lt;/span&gt; เป็น generators ของกรุ๊ปหมด เหลือแค่ &lt;span class=&quot;math&quot;&gt;\(p\)&lt;/span&gt; ตัวเดียวที่ไม่มีอินเวิร์ส) &lt;span class=&quot;math&quot;&gt;\(a^{p-1}\)&lt;/span&gt; จึงเท่ากับ 1 mod &lt;span class=&quot;math&quot;&gt;\(p\)&lt;/span&gt; ด้วย&lt;a href=&quot;https://en.wikipedia.org/wiki/Lagrange%27s_theorem_(group_theory)&quot;&gt;ทฤษฎีบทของลากรานจ์&lt;/a&gt; เพราะกรุ๊ปที่ generated โดย &lt;span class=&quot;math&quot;&gt;\(a\)&lt;/span&gt; เป็นซับกรุ๊ป (subgroup) ของ &lt;span class=&quot;math&quot;&gt;\(\mathbb{Z}_p^*\)&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;&lt;/details&gt;&lt;/p&gt;
&lt;p&gt;&lt;details&gt;&lt;summary&gt;&lt;strong&gt;การหาค่าของ &lt;span class=&quot;math&quot;&gt;\(M\)&lt;/span&gt;: &lt;span class=&quot;math&quot;&gt;\(N\)&lt;/span&gt; เป็นกำลังของจำนวนเฉพาะ&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;

เมื่อ &lt;span class=&quot;math&quot;&gt;\(N\)&lt;/span&gt; เป็นกำลังของจำนวนเฉพาะ (prime power) &lt;span class=&quot;math&quot;&gt;\(N = p^r\)&lt;/span&gt;, จำนวนที่ไม่เป็น coprime กับ &lt;span class=&quot;math&quot;&gt;\(p^r\)&lt;/span&gt; ใน &lt;span class=&quot;math&quot;&gt;\(\mathbb{Z}_{p^r}\)&lt;/span&gt; และไม่มากกว่า &lt;span class=&quot;math&quot;&gt;\(p^r\)&lt;/span&gt; คือ &lt;span class=&quot;math&quot;&gt;\(p,2p,\cdots,p^{r-1}p\)&lt;/span&gt; ซึ่งมี &lt;span class=&quot;math&quot;&gt;\(p^{r-1}\)&lt;/span&gt; จำนวน ดังนั้น &lt;span class=&quot;math&quot;&gt;\(\varphi(N) = p^r - p^{r-1}\)&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;&lt;/details&gt;&lt;/p&gt;
&lt;p&gt;&lt;details&gt;&lt;summary&gt;&lt;strong&gt;การหาค่าของ &lt;span class=&quot;math&quot;&gt;\(M\)&lt;/span&gt;: &lt;span class=&quot;math&quot;&gt;\(N\)&lt;/span&gt; ทั่วไป&lt;/strong&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;

เมื่อ &lt;span class=&quot;math&quot;&gt;\(N\)&lt;/span&gt; เป็นผลคูณของกำลังของจำนวนเฉพาะ &lt;span class=&quot;math&quot;&gt;\(N = p_1^{r_1} p_2^{r_2}\)&lt;/span&gt; เราสามารถ&lt;a href=&quot;https://en.wikipedia.org/wiki/Euler%27s_totient_function#Computing_Euler%27s_totient_function&quot;&gt;พิสูจน์&lt;/a&gt;ได้ว่า totient function เป็นผลคูณ &lt;span class=&quot;math&quot;&gt;\(\varphi(p_1^{r_1}) \varphi(p_2^{r_2})\)&lt;/span&gt; หรือ &lt;span class=&quot;math&quot;&gt;\[ \varphi(p_1^{r_1}p_2^{r_2} \cdots p_k^{r_k}) = (p_1^{r_1}-p_1^{r_1-1}) (p_2^{r_2}-p_2^{r_2-1}) \cdots (p_k^{r_k}-p_k^{r_k-1}) \]&lt;/span&gt; นั่นเอง ทำให้ได้ว่า &lt;span class=&quot;math&quot;&gt;\[ \varphi(N) = (p-1)(q-1) \]&lt;/span&gt; เมื่อ &lt;span class=&quot;math&quot;&gt;\(N\)&lt;/span&gt; เป็นผลคูณของจำนวนเฉพาะสองจำนวน
&lt;/p&gt;
&lt;p&gt;&lt;/details&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;การที่ RSA รักษาความปลอดภัยได้ก็เพราะไม่มีใครมีอัลกอริธึมคลาสสิคัลที่แยกตัวประกอบได้อย่างรวดเร็ว วิธีหนึ่งในการหาตัวประกอบของ &lt;span class=&quot;math&quot;&gt;\(N\)&lt;/span&gt; คือไล่หาร &lt;span class=&quot;math&quot;&gt;\(N\)&lt;/span&gt; ด้วยจำนวนเล็กๆไปเรื่อยๆจนกว่าจะเจอตัวหาร ซึ่งอาจจะต้องหารไปถึง &lt;span class=&quot;math&quot;&gt;\(\sqrt{N}\)&lt;/span&gt; ตัว ทำไมนี่ไม่ใช่อัลกอริธึม polynomial-time ล่ะ? เหตุผลก็คือเราต้องการแค่ &lt;span class=&quot;math&quot;&gt;\(\log N\)&lt;/span&gt; บิตในการบันทึกจำนวนเต็ม &lt;span class=&quot;math&quot;&gt;\(N\)&lt;/span&gt; ขนาดของอินพุตจึงไม่ใช่ &lt;span class=&quot;math&quot;&gt;\(N\)&lt;/span&gt; แต่เป็น &lt;span class=&quot;math&quot;&gt;\(n=\log N\)&lt;/span&gt; ต่างหาก อัลกอริธึมไล่หารโง่ๆจึงใช้เวลา &lt;span class=&quot;math&quot;&gt;\(2^{n/2}\)&lt;/span&gt; อัลกอริธึม Number Field Sieve ที่ดีสุด ก็&lt;a href=&quot;http://math.mit.edu/~cohn/Thoughts/factoring.html&quot;&gt;ใช้เวลา&lt;/a&gt;ประมาณ &lt;span class=&quot;math&quot;&gt;\(2^{n^{1/3}}\)&lt;/span&gt; ยังคงเป็นทวีคูณ (exponential) ในขนาดของอินพุต&lt;/p&gt;
&lt;h2 id=&quot;แยกตวประกอบดวยการหาคาบ&quot;&gt;แยกตัวประกอบด้วยการหาคาบ&lt;/h2&gt;
สิ่งที่นักวิทยาศาสตร์คอมพิวเตอร์รู้มาก่อนชอร์ก็คือถ้าเราสุ่มเอาจำนวน &lt;span class=&quot;math&quot;&gt;\(a\)&lt;/span&gt; มาหาคาบใน &lt;span class=&quot;math&quot;&gt;\(\text{mod}\,N\)&lt;/span&gt; เยอะๆ เราก็จะหาตัวประกอบของ &lt;span class=&quot;math&quot;&gt;\(N\)&lt;/span&gt; ได้ &lt;a href=&quot;#fn3&quot; class=&quot;footnoteRef&quot; id=&quot;fnref3&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; คาบของ &lt;span class=&quot;math&quot;&gt;\(a\)&lt;/span&gt; คือคาบของฟังก์ชันยกกำลัง &lt;span class=&quot;math&quot;&gt;\(a^x\,\,\text{mod}\,N\)&lt;/span&gt; (modular exponentiation) ยกตัวอย่างเช่นถ้าเราจับ &lt;span class=&quot;math&quot;&gt;\(a=2\)&lt;/span&gt; ยกกำลังไปเรื่อยๆใน &lt;span class=&quot;math&quot;&gt;\(\text{mod}\,15\)&lt;/span&gt; ค่ามันก็จะวนซ้ำทุกๆ 6 ตัว
&lt;p&gt;
&lt;center&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;x&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;1&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;2&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;3&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;4&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;5&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;6&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;7&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;8&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;9&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;10&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;11&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;&lt;span class=&quot;math&quot;&gt;\(2^x\)&lt;/span&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;8&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;16&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;11&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;8&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;16&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/center&gt;
&lt;/p&gt;

&lt;p&gt;เราเรียกค่านี้ว่าคาบ &lt;span class=&quot;math&quot;&gt;\(r\)&lt;/span&gt; ของ &lt;span class=&quot;math&quot;&gt;\(a\)&lt;/span&gt; คือจำนวนที่น้อยที่สุดที่ &lt;span class=&quot;math&quot;&gt;\[a^r \equiv 1 \mod N\]&lt;/span&gt; หาก &lt;span class=&quot;math&quot;&gt;\(N\)&lt;/span&gt; มี &lt;span class=&quot;math&quot;&gt;\(k\)&lt;/span&gt; ตัวประกอบ โอกาสที่จะสุ่มได้ &lt;span class=&quot;math&quot;&gt;\(a\)&lt;/span&gt; ที่ให้ตัวประกอบเมื่อนำมาหาคาบคือ &lt;span class=&quot;math&quot;&gt;\(1-1/2^{k-1}\)&lt;/span&gt; คือยังไงก็มีโอกาสไม่น้อยไปกว่าครึ่ง&lt;/p&gt;
&lt;hr /&gt;
&lt;details&gt;&lt;summary&gt;&lt;strong&gt;รากที่สองที่ไม่ชัดของ 1 ให้ตัวประกอบ&lt;/strong&gt;&lt;/summary&gt;
&lt;p&gt;

ไอเดียก็คือถ้า &lt;span class=&quot;math&quot;&gt;\(r\)&lt;/span&gt; หารด้วย 2 ลงตัว &lt;span class=&quot;math&quot;&gt;\(a^{r/2}\)&lt;/span&gt; ก็จะเป็นรากที่สองของ 1 ใน &lt;span class=&quot;math&quot;&gt;\(\text{mod}\,N\)&lt;/span&gt; จากนั้นก็ใช้ไอเดียจาก&lt;a href=&quot;https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test&quot;&gt;การทดสอบจำนวนเฉพาะของมิลเลอร์และราบิน&lt;/a&gt; (Miller-Rabin primality testing): รากที่สองของ 1 &lt;span class=&quot;math&quot;&gt;\[ b^2 \equiv 1 \mod N \]&lt;/span&gt; มีแน่ๆอยู่แล้วสองตัวคือ 1 และ &lt;span class=&quot;math&quot;&gt;\(-1 \equiv N-1\,\,\text{mod}\,N\)&lt;/span&gt; เรียกว่ารากที่สองที่ชัด (trivial) แต่ถ้าเมื่อไรมีรากที่สองมากไปกว่านี้ (nontrivial square root) &lt;span class=&quot;math&quot;&gt;\(N\)&lt;/span&gt; จะต้องเป็นจำนวนประกอบเพราะหาก &lt;span class=&quot;math&quot;&gt;\(b \not\equiv \pm 1\,\,\text{mod}\,N\)&lt;/span&gt; และ &lt;span class=&quot;math&quot;&gt;\[ b^2 -1 = (b+1)(b-1) \equiv 0 \mod N \]&lt;/span&gt; &lt;span class=&quot;math&quot;&gt;\(N\)&lt;/span&gt; จะต้องหาร &lt;span class=&quot;math&quot;&gt;\((b+1)(b-1)\)&lt;/span&gt; ลงตัว แต่ &lt;span class=&quot;math&quot;&gt;\(N\)&lt;/span&gt; หาร &lt;span class=&quot;math&quot;&gt;\(b+1\)&lt;/span&gt; หรือ &lt;span class=&quot;math&quot;&gt;\(b-1\)&lt;/span&gt; โดดๆไม่ลงตัว (เพราะ &lt;span class=&quot;math&quot;&gt;\(b \pm 1 \not\equiv 0\,\,\text{mod}\,N\)&lt;/span&gt;) &lt;span class=&quot;math&quot;&gt;\(N\)&lt;/span&gt; จึงต้องเป็นผลคูณของตัวประกอบที่แบ่งไปหาร &lt;span class=&quot;math&quot;&gt;\(b+1\)&lt;/span&gt; กับ &lt;span class=&quot;math&quot;&gt;\(b-1\)&lt;/span&gt; แยกกัน ด้วยเหตุนี้ ห.ร.ม.ของ &lt;span class=&quot;math&quot;&gt;\(b \pm 1\)&lt;/span&gt; และ &lt;span class=&quot;math&quot;&gt;\(N\)&lt;/span&gt; จึงเป็นตัวประกอบของ &lt;span class=&quot;math&quot;&gt;\(N\)&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;&lt;/details&gt;&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;&lt;strong&gt;ความน่าจะเป็นที่ &lt;span class=&quot;math&quot;&gt;\(a\)&lt;/span&gt; จะให้รากที่สองที่ไม่ชัดของ 1&lt;/strong&gt;&lt;/summary&gt;
&lt;p&gt;

ยังไม่ได้เขียน
&lt;/p&gt;
&lt;p&gt;&lt;/details&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;หาคาบดวยอลกอรธมควอนตม&quot;&gt;หาคาบด้วยอัลกอริธึมควอนตัม&lt;/h2&gt;
&lt;h2 id=&quot;ขอควรระวงในการรนอลกอรธม&quot;&gt;ข้อควรระวังในการรันอัลกอริธึม&lt;/h2&gt;
&lt;p&gt;“Compiled Shor’s algorithm”&lt;/p&gt;
&lt;h2 id=&quot;ความซบซอนของการแยกตวประกอบ&quot;&gt;ความซับซ้อนของการแยกตัวประกอบ&lt;/h2&gt;
&lt;p&gt;Factoring อยู่ใน NP ∩ coNP เชื่อว่าไม่ NP-complete มิฉะนั้น PH จะยุบมาถึงระดับที่หนึ่ง (NP=coNP=PH)&lt;/p&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;ถ้าไม่คิดอะไร เราอาจจะนึกว่า &lt;span class=&quot;math&quot;&gt;\(ed \equiv 1\,\,\text{mod}\,N\)&lt;/span&gt; คือคำตอบ แต่ &lt;span class=&quot;math&quot;&gt;\(a^{b\,\,\text{mod}\,N} \not\equiv a^b\,\,\text{mod}\,N\)&lt;/span&gt; เช่น &lt;span class=&quot;math&quot;&gt;\(2^5 \equiv 2^{1\,\,\text{mod}\,4}\)&lt;/span&gt; แต่ &lt;span class=&quot;math&quot;&gt;\(2^5 = 32 \equiv 0\,\,\text{mod}\,4\)&lt;/span&gt;&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn2&quot;&gt;&lt;p&gt;จริงๆแล้วการแยกตัวประกอบก็ลดรูปเป็นปัญหาการทำลายระบบ RSA ได้ด้วย randomized polynomial-time algorithm จึงกล่าวได้ว่าทั้งสองปัญหาเป็นปัญหาเดียวกัน (Cristopher Moore และ Stephan Mertens, &lt;em&gt;The Nature of Computation&lt;/em&gt; หน้า 895)&lt;a href=&quot;#fnref2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn3&quot;&gt;&lt;p&gt;หรือถ้าเช็คว่า &lt;span class=&quot;math&quot;&gt;\(a\)&lt;/span&gt; เป็นจำนวนเฉพาะ (ซึ่งทำได้ใน &lt;a href=&quot;https://en.wikipedia.org/wiki/Primality_test&quot;&gt;polynomial time&lt;/a&gt;) และโชคดี ห.ร.ม. ของ &lt;span class=&quot;math&quot;&gt;\(a\)&lt;/span&gt; กับ &lt;span class=&quot;math&quot;&gt;\(N\)&lt;/span&gt; ไม่ใช่ 1 ก็จบ ห.ร.ม.นั่นแหละคือตัวประกอบ&lt;a href=&quot;#fnref3&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
 </entry>
 
 <entry>
   <title>ขั้นคิดคำนวณแบบควอนตัม</title>
   <link href="/quantum-algorithms.html"/>
   <updated>2017-08-01T00:00:00+00:00</updated>
   <id>h/quantum-algorithms</id>
   <content type="html">&lt;p&gt;เมื่อหนึ่งปีเต็มที่แล้วถูกชักชวนจากจิรวัฒน์ ตั้งปณิธานนท์ (Center for Quantum Technologies, สิงคโปร์) ให้ไปช่วยเขียนหนังสือให้ความรู้เกี่ยวกับคอมพิวเตอร์เชิงควอนตัม ด้วยความช่วยเหลือตรวจแก้จากบรรณาธิการและผู้ร่วมชะตากรรมเขียนคนอื่นๆทำให้สำเร็จออกมาเป็นหนังสือ(ฟรี) &lt;a href=&quot;http://www.ebooks.in.th/ebook/45594/&quot;&gt;&lt;em&gt;รูป รส กลิ่น เสียง สัมผัส ไอทีควอนตัม (๓): “คอมพิวเตอร์เชิงควอนตัม”&lt;/em&gt;&lt;/a&gt; จนได้ แต่ส่วนที่มีคณิตศาสตร์ที่เกินกว่าการนับเลขถูกตัดออกหมดก็เลยอยากจะลงต้นฉบับที่มีคณิตศาสตร์ไว้ ณ ที่นี้เพื่อความเข้าใจคอมพิวเตอร์เชิงควอนตัมที่แม่นยำและลึกซึ้งขึ้นครับ (ขอขอบคุณปัณฑิตา ผลิตผลการพิมพ์ ที่อ่านและวิจารณ์ดราฟท์แรกอย่างละเอียดจนกลายมาเป็นต้นฉบับนี้ได้ แต่ข้อผิดพลาดใดๆหรือภาษาที่ไม่สละสลวยเป็นความรับผิดชอบของผมเอง)&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&quot;อลกอรธมนนสำคญไฉน&quot;&gt;อัลกอริธึมนั้นสำคัญไฉน&lt;/h1&gt;
&lt;center&gt;
&lt;img src=&quot;/assets/img/posts/08-2017/koenigsberg-merian-erben_1652.jpg&quot; style=&quot;width: 628px;&quot;/&gt;
&lt;/center&gt;

&lt;p&gt;นี่คือหน้าตาของเมืองเคอนิกสแบร์ก (Königsberg) ในศตวรรษที่ 18 ที่แม่น้ำ Pregel ไหลผ่านตัดแยกตัวเมืองเป็นสี่ผืนดินที่เชื่อมกันด้วยสะพานเจ็ดสะพาน (ก่อนจะเหลือแค่ห้าจากการทิ้งระเบิดสมัยสงครามโลกครั้งที่สอง) ชาวเมืองเคอนิกสแบร์กมักจะใช้เวลาบ่ายวันอาทิตย์เดินชมเมืองอันสวยงามของพวกเขา จนมีคนนึกสนุกตั้งปัญหาขึ้นมาว่าเป็นไปได้ไหมที่จะเดินข้ามสะพานครบทั้งเจ็ดสะพานโดยไม่ข้ามสะพานใดสะพานหนึ่งมากกว่าหนึ่งครั้ง?&lt;/p&gt;
&lt;p&gt;อีกปัญหาที่มีความคล้ายกันมากมาจากเกมที่วิลเลียม โรวัน แฮมิลตัน (William Rowan Hamilton) ชาวไอริชคิดขึ้นในปี 1857 ชื่อว่าเกมไอโคเซียน (Icosian) เป้าหมายของเกมคือการหาเส้นทางเดินบนขอบ (ที่เป็นเส้นหนึ่งมิติ ไม่ใช่หน้า) ของรูปเหลี่ยม 12 หน้า (dodecahedron) ที่ผ่านทุกมุมแต่ไม่ผ่านมุมใดมุมหนึ่งมากกว่าหนึ่งครั้ง&lt;/p&gt;
&lt;center&gt;
&lt;img src=&quot;/assets/img/posts/08-2017/dodecahedron.png&quot; style=&quot;width: 300px;&quot;/&gt;
&lt;/center&gt;

&lt;p&gt;ในทางคณิตศาสตร์แล้ว ทั้งสองปัญหาคือปัญหาเกี่ยวกับการเดินบนเน็ตเวิร์คซึ่งเป็นโครงสร้างที่ประกอบด้วยเส้นเชื่อม (edge) และโหนด (หรือจุดยอด vertex) เกมไอโคเซียนถามหาเส้นทางเดินบนเน็ตเวิร์คที่ผ่านทุกๆโหนดแต่ไม่ผ่านโหนดใดโหนดหนึ่งมากกว่าหนึ่งครั้ง ในขณะที่ปัญหาสะพานทั้งเจ็ดของเคอนิกสแบร์กถามหาเส้นทางเดินบนเน็ตเวิร์คที่ผ่านทุกๆเส้นเชื่อมแต่ไม่ผ่านเส้นเชื่อมใดเส้นเชื่อมหนึ่งมากกว่าหนึ่งครั้ง&lt;/p&gt;
&lt;p&gt;เลออนฮาร์ด ออยเลอร์ (Leonhard Euler) ชาวสวิตเซอร์แลนด์ที่ช่วงนั้นทำงานอยู่ที่เซนต์ ปีเตอร์สเบอร์ก สังเกตว่าปัญหาสะพานทั้งเจ็ดของเคอนิกสแบร์กจะมีคำตอบก็ต่อเมื่อไม่มีโหนดที่มีเส้นออกจากโหนดเป็นจำนวนคี่ หรือถ้ามีก็มีแค่สองโหนด เพราะการผ่านโหนดใดโหนดหนึ่งโดยไม่เดินซ้ำเส้นทางเดิมจะต้องมีทางเข้าทางหนึ่งกับทางออกทางหนึ่ง แต่โหนดเริ่มต้นไม่ต้องมีทางเข้าและโหนดสุดท้ายไม่ต้องมีทางออก คำตอบของออยเลอร์ลึกซึ้งที่ว่ามันไม่ใช่คำตอบของปัญหาสะพานทั้งเจ็ดของเคอนิกสแบร์กปัญหาเดียวแต่เป็นคำตอบของการเดินโดยไม่ซ้ำเส้นทางเดิมบนทุกๆเน็ตเวิร์ค และมันยังบอกขั้นตอนการหาคำตอบหรือ&lt;strong&gt;อัลกอริธึม&lt;/strong&gt; (algorithm) ที่มีประสิทธิภาพสำหรับทุกๆเน็ตเวิร์คโดยการนับจำนวนเส้นเชื่อมที่ออกจากโหนดแต่ละโหนดเท่านั้น&lt;/p&gt;
&lt;p&gt;ทว่าจนถึงทุกวันนี้ยังไม่มีใครรู้อัลกอริธึมเร็วๆสำหรับเกมไอโคเซียนที่ใช้ได้กับทุกๆเน็ตเวิร์ค ซึ่งน่าคิดเพราะเกมไอโคเซียนต่างกับปัญหาสะพานทั้งเจ็ดของเคอนิกสแบร์กเพียงแค่เปลี่ยนเส้นเชื่อมเป็นโหนดเท่านั้นเอง อัลกอริธึมที่ใช้ได้กับทั้งสองปัญหาก็คือลองเดินมันโง่ๆทุกเส้นทางบนเน็ตเวิร์คแล้วดูว่ามีเส้นทางที่เป็นคำตอบไหม แต่วิธีนี้อาจจะต้องใช้เวลาเป็นทวีคูณ (exponential) ของขนาดของเน็ตเวิร์ค จำนวนที่เป็นทวีคูณนี่ใหญ่ขนาดกันนะ?&lt;/p&gt;
&lt;p&gt;ในนิทานเรื่องหนึ่ง พระราชาเรียกผู้ที่คิดเกมหมากรุกได้เป็นคนแรกมาเข้าเฝ้าหวังจะให้รางวัลตอบแทนอย่างยิ่งใหญ่สมกับผลงานของเขา คนผู้นั้นก็ขอรางวัลเป็นข้าวสารหนึ่งเม็ดในช่องแรกของกระดานหมากรุก สองเม็ดในช่องที่สอง สี่เม็ดในช่องที่สาม… เพิ่มขึ้นที่ละสองเท่าตัวๆจนเต็ม 64 ช่องของกระดานหมากรุก พระราชาก็รับปากถึงแม้ในใจจะคิดว่าข้าวสารแค่นี้จะมีค่าสักเท่าไรเชียว จนกระทั่งคนรับใช้กะปริมาณข้าวสารที่ต้องให้&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1,000,000 เม็ดในช่องที่ 20&lt;/li&gt;
&lt;li&gt;1,000,000,000,000 เม็ดในช่องที่ 40&lt;/li&gt;
&lt;li&gt;18,000,000,000,000,000,000 เม็ดในช่องสุดท้ายซึ่งถ้าตีเป็นน้ำหนักก็จะได้ประมาณ 460,000,000 ตัน&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
&lt;img src=&quot;/assets/img/posts/08-2017/rice-on-chessboard.jpeg&quot; style=&quot;width: 750px;&quot;/&gt;
&lt;/center&gt;

&lt;p&gt;บางเวอร์ชันของเรื่องเล่านี้จบลงที่พระราชาสั่งประหารคนผู้นั้นเมื่อรู้ตัวว่าโดนหลอกเข้าให้แล้ว บทเรียนหนึ่งของเรื่องนี้ก็คืออย่าไปกวนตีนคนที่มีอำนาจมากนัก แต่อีกบทเรียนที่สำคัญกว่าก็คือจำนวนที่โตแบบทวีคูณนั้นอาจจะโตเกินจินตนาการของเราได้ ถึงปัญหาจะไม่ใหญ่มาก แต่ถ้ามีแต่อัลกิริธึมที่ต้องใช้เวลาเป็นทวีคูณ ถึงจะใช้ซูเปอร์คอมพิวเตอร์ที่ทำการคำนวณได้กว่า 10 ยกกำลัง 15 ขึ้นตอนในหนึ่งวินาทีก็ยังอาจต้องใช้เวลาเกินอายุปัจจุบันของเอกภพ (13.7 พันล้านปี) ในขณะที่ดวงอาทิตย์อยู่ได้อีกแค่ประมาณห้าพันล้านปี อัลกอริธึมที่ช้าจึงไม่ใช่แค่ไม่ทันใจ แต่อาจจะไม่ทันโลกแตกด้วยซ้ำ! ปัญหาที่ต้องใช้เวลาเป็นทวีคูณในการแก้ถือเป็นปัญหาที่&lt;strong&gt;ยาก&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;บตรเครดต-เสยงดนตร-และคอมพวเตอรควอนตม&quot;&gt;บัตรเครดิต, เสียงดนตรี, และคอมพิวเตอร์ควอนตัม&lt;/h1&gt;
&lt;p&gt;ไอเดียของคอมพิวเตอร์ที่อาศัยพฤติกรรมเชิงควอนตัมของสสารในการคำนวณมีมาตั้งแต่ปี 1980 แล้วแต่ในตอนนั้นยังไม่ชัดเจนว่าคอมพิวเตอร์ควอนตัมจะแก้ปัญหายากๆได้เร็วกว่าคอมพิวเตอร์ธรรมดาขนาดไหน จุดเปลี่ยนที่ทำให้คนหันมาสนใจคอมพิวเตอร์ควอนตัมในวงกว้างมาจากวงการที่แทบจะไม่เกี่ยวข้องกับฟิสิกส์เลย: วงการรหัสลับ&lt;/p&gt;
&lt;p&gt;การส่งข้อความลับจะต้องมีกุญแจเข้ารหัส (encrypt) และกุญแจถอดรหัส (decrypt) รหัสลับก่อนสงครามโลกครั้งที่สองมักใช้กุญแจเดียวกันทั้งในการเข้าและถอดรหัส จึงถูกเรียกว่ากุญแจแบบสมมาตร (symmetric key) รหัสแบบนี้สามารถให้ความปลอดภัยอย่างสมบูรณ์แบบได้ในทางทฤษฎีเช่น one-time pad ที่มีกุญแจเป็นข้อความสุ่มมั่วๆเอามาใช้แปลงข้อความจริง ถ้ารู้ข้อความสุ่มนั้นก็จะกู้ข้อความจริงกลับมาได้ แต่กุญแจต้องใช้แล้วทิ้ง ห้ามใช้ซ้ำกัน ตามชื่อว่า one-time (การที่โปรเจ็กต์ VENONA ของ NSA สหรัฐอเมริกาจับตัวสายลับโซเวียตในช่วงสงครามโลกครั้งที่สองได้ก็เชื่อกันว่ามาจากการใช้กุญแจซ้ำของโซเวียตที่มีเหตุจากการเร่งการผลิตกุญแจลับเพราะการบุกของเยอรมัน) ยิ่งข้อความลับยาวกุญแจก็ยิ่งต้องใหญ่ นอกจากนี้การที่ทั้งผู้ส่งและผู้รับจะต้องมีกุญแจเดียวกันก็แปลว่าจะต้องมีการส่งกุญแจกันไปมา ถ้าถูกดักตีหัวขโมยกุญแจก็เสร็จ&lt;/p&gt;
&lt;p&gt;ในปัจจุบันรหัสลับส่วนใหญ่ใช้กุญแจคนละดอกในการเข้าและถอดรหัส โดยกุญแจเข้ารหัสเป็นกุญแจสาธารณะ (public key) ที่ใครๆก็รู้ได้ ระบบแบบนี้ไม่มีทางปลอดภัยอย่างสมบูรณ์แบบเพราะข้อมูลของกุญแจถอดรหัสก็อยู่ในกุญแจเข้ารหัส (ทั้งสองกุญแจมีความสัมพันธ์กันเพราะกุญแจถอดรหัสต้องแก้สิ่งที่กุญแจเข้ารหัสทำ) การค้นพบครั้งสำคัญในวงการรหัสลับคือการใช้ปัญหาการแยกตัวประกอบที่เชื่อว่าไม่มีอัลกอริธึมใดๆในปัจจุบันแก้ได้เร็วพอมาป้องกันการกู้กุญแจถอดรหัสจากกุญแจเข้ารหัส การเข้ารหัสนี้เรียกว่าการเข้ารหัสแบบ RSA &lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; และเป็นระบบการเข้ารหัสที่ใช้กันแพร่หลายในการเข้าเวบอย่างปลอดภัย (https), การป้องกันพาสเวิร์ด, หรือบัตรเครดิต ทุกครั้งที่เราซื้อของออนไลน์ ความปลอดภัยของเราขึ้นอยู่กับ RSA&lt;/p&gt;
&lt;p&gt;ถ้าดูนาฬิกาเป็นก็จะเข้าใจไอเดียของ RSA ได้ สังเกตว่าในการบวก-ลบเวลา เราจะไม่พูดว่า “10 ชั่วโมงหลัง 20 นาฬิกาคือ 30 นาฬิกา” แต่เราจะเริ่มนับส่วนที่เกิน 24 ใหม่ นอกจากบวก-ลบแล้วการคูณหรือการยกกำลังในระบบเลขคณิตแบบนี้ก็เป็นสิ่งที่ทำได้เพราะการคูณคือการบวกซ้ำๆกันและการยกกำลังคือการคูณซ้ำๆกัน ซึ่งคนส่วนใหญ่คงจะไม่เคยทำ แต่ถ้าลองทำดูจะพบสิ่งหนึ่งที่น่าสนใจคือการคูณเลขด้วยตัวมันเองซ้ำๆจะทำให้ย้อนกลับมายังเลขตั้งต้นได้ ตารางด้านล่างเป็นผลคูณ 2 ด้วยตัวมันเองถ้ามี 15 ชั่วโมงในหนึ่งวัน&lt;/p&gt;
&lt;!-- https://stackoverflow.com/questions/24127507/is-it-possible-to-center-tables-in-a-markdown-file --&gt;
&lt;center&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;กำลัง&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;1&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;2&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;3&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;4&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;5&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;6&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;7&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;ค่าของ 2 ยกกำลัง&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;8&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/center&gt;

&lt;p&gt;การเข้ารหัสแบบ RSA แปลงข้อความให้เป็นจำนวนเต็มก่อน เรียกจำนวนนี้ว่า m (message) กุญแจสาธารณะคือจำนวนของ“ชั่วโมง” N และตัวเลข x ที่ทำให้ผู้เข้ารหัสสามารถคำนวณ m ยกกำลัง x ในเลขคณิตแบบนาฬิกาได้ เมื่อถึงมือผู้รับรหัส มีกุญแจลับ y ที่บอกว่าจะต้องยกกำลังต่ออีกเท่าไรจึงจะได้ข้อความ m กลับมา การจะรู้ y ได้จะต้องแยกตัวประกอบของ N ซึ่งเป็นส่วนหนึ่งของกุญแจสาธารณะที่ใครๆก็มี แต่ปัญหาก็คือทุกๆอัลกอริธึมการแยกตัวประกอบที่มีในปัจจุบันต้องใช้เวลาเป็นทวีคูณ การจะถอดรหัส RSA ที่ N เป็นเลขหลายร้อยหลักอาจจะต้องใช้เวลาเป็นล้านปี&lt;/p&gt;
&lt;p&gt;แต่ถ้ามีคอมพิวเตอร์ควอนตัม การแยกตัวประกอบเลขหลายร้อยหลักจะใช้เวลาเพียงไม่กี่วินาที! &lt;a href=&quot;#fn2&quot; class=&quot;footnoteRef&quot; id=&quot;fnref2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; สิ่งที่ต่างก็คือคอมพิวเตอร์ควอนตัมมีอัลกอริธึมควอนตัมที่สามารถหาทางลัดในการแก้บางปัญหาได้ การทำงานของอัลกอริธึมควอนตัมแยกตัวประกอบค่อนข้างซับซ้อนแต่หัวใจของมันมาจากการทำงานร่วมกันของการยกกำลังในเลขคณิตนาฬิกากับการแปลงฟูเรียร์ (Fourier transform) การแปลงฟูเรียร์เป็นการแตกคลื่นเป็นผลรวมของหลายๆคลื่นที่มีความถี่เฉพาะตัว ไม่ต่างกับการแยกเสียงดนตรีเป็นโน๊ตความถี่ต่างๆ ทำให้สามารถขับหรือลดเสียงของเครื่องดนตรีแต่ละชนิดแยกกันได้ หน้าที่ของการแปลงฟูเรียร์ในอัลกอริธึมควอนตัมคือการหาคาบ (ส่วนกลับของความถี่) ของการยกกำลังในเลขคณิตนาฬิกา เมื่อรู้คาบ — จำนวนครั้งที่ต้องคูณเพื่อให้ได้ค่าเดิมกลับมา — ก็จะทำให้แยกตัวประกอบและรู้ y ได้ จึงทำลายรหัสลับ RSA ได้&lt;/p&gt;
&lt;p&gt;บางปัญหาที่ยากสำหรับคอมพิวเตอร์ธรรมดาเป็นปัญหาที่ง่ายสำหรับคอมพิวเตอร์ควอนตัม นี่เป็นการค้นพบของ ปีเตอร์ ชอร์ (Peter Shor) ชาวอเมริกันในปี 1994 ที่สั่นสะเทือนวงการการถอดรหัสลับและฟิสิกส์ ปัจจุบันยังไม่มีคอมพิวเตอร์ควอนตัมขนาดใหญ่พอที่จะทำแบบนี้ได้ อินส์บรุค (Innsbruck) จับมือกับ MIT เพิ่งจะตีพิมพ์การแยกตัวประกอบ 15 ออกเป็น 3x5 ได้สำเร็จด้วยคอมพิวเตอร์ควอนตัมจิ๋ว 5 อะตอมเมื่อปีที่แล้ว &lt;a href=&quot;#fn3&quot; class=&quot;footnoteRef&quot; id=&quot;fnref3&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; แต่ก็ไม่ต้องห่วงว่าถ้าทำสำเร็จโลกนี้จะไม่มีความลับอีกต่อไปเพราะนักวิทยาศาสตร์ได้เตรียมรหัสลับต้านทานอัลกอริธึมควอนตัมไว้เรียบร้อยแล้ว (&lt;a href=&quot;https://en.wikipedia.org/wiki/Post-quantum_cryptography&quot;&gt;post-quantum cryptography&lt;/a&gt;)&lt;/p&gt;
&lt;h1 id=&quot;เรขาคณตของอลกอรธมควอนตม&quot;&gt;เรขาคณิตของอัลกอริธึมควอนตัม&lt;/h1&gt;
&lt;p&gt;ความเข้าใจผิดที่ได้ยินกันแพร่หลายมากที่สุดเกี่ยวกับคอมพิวเตอร์ควอนตัมคือคอมพิวเตอร์ควอนตัมเหมือนกับคอมพิวเตอร์ธรรมดาที่ประมวลผลแบบคู่ขนาน แก้ปัญหาโดยการเช็คคำตอบทุกคำตอบที่เป็นไปได้พร้อมๆกัน ซึ่งถ้าทำได้จริงก็จะมหัศจรรย์มาก ไม่ว่าปัญหาใดๆ อัลกอริธึมควอนตัมที่ลองทุกคำตอบก็จะแก้ได้ในหนึ่งขั้นตอนเท่านั้น แต่ความจริงไม่ง่ายแบบนั้น ซึ่งก็อาจจะเป็นเรื่องดีเพราะการเข้ารหัสลับที่ต้านทานอัลกอริธึมควอนตัมก็ต้องอาศัยปัญหาที่ยากสำหรับทั้งอัลกอริธึมธรรมดาและอัลกอริธึมควอนตัม ตัวอย่างที่ดีเยี่ยมในการแสดงให้เห็นการความแตกต่างของการทำงานของอัลกอริธึมธรรมดากับอัลกอริธึมควอนตัมจึงเป็นอัลกอริธึมควอนตัมในการเช็คคำตอบที่ลอฟ โกรเวอร์ (Lov Grover) ชาวอเมริกัน-อินเดีย คิดขึ้นมาในปี 1996 หลังจากชอร์ 2 ปี&lt;/p&gt;
&lt;p&gt;การจะเข้าใจการทำงานของอัลกอริธึมนี้จะต้องรู้พื้นฐานของทฤษฎีควอนตัมเสียก่อนทฤษฎีควอนตัมรวมคณิตศาสตร์ของความน่าจะเป็นกับเรขาคณิต แต่เป็นเรขาคณิตที่มีแต่ทิศทาง ไม่มีขนาด (สำหรับคนที่รู้จักเวกเตอร์ จึงไม่ใช่เรขาคณิตของเวกเตอร์เสียทีเดียวเพราะเวกเตอร์มีทั้งขนาดและทิศทาง) ในเรขาคณิตแบบนี้ เหนือกับใต้ถือว่าเป็นทิศเดียวกันเพราะการเดินไปทางเหนือก็คือการเดินไปทางใต้ด้วยระยะทางติดลบ พูดอีกอย่างก็คือมุม 180 องศากลายเป็น 0 องศา (แทนที่ 360 องศาจะเป็น 0 องศา) แต่ความใกล้กันของสองทิศทางก็ยังวัดได้ด้วยมุมที่ไม่เกิน 90 องศา สิ่งที่สำคัญคือยังมีทิศทางที่ตั้งฉากกัน (ทำมุม 90 องศา) นิยามของมิติจึงเหมือนกับในเรขาคณิตปกติ คือจำนวนที่มากที่สุดของทิศทางที่ตั้งฉากกัน เหมือนที่ 3 มิติมีความกว้าง ความยาว และความสูง &lt;a href=&quot;#fn4&quot; class=&quot;footnoteRef&quot; id=&quot;fnref4&quot;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ระบบฟิสิกส์ไม่ว่าจะเป็นอะตอม ไอออน ช่องว่างในเพชร หรือวงจรไฟฟ้ายิ่งยวด ที่จะได้เจอในบทถัดๆไปของหนังสือเล่มนี้จะมีสถานะควอนตัม (quantum state) ของมันเองถ้าได้รับการป้องกันอย่างดีพอจากสิ่งรบกวนภายนอกไม่ว่าจะเป็นสนามแม่เหล็กไฟฟ้าหรือความร้อน ซึ่งตามทฤษฎีควอนตัมแล้ว ทิศทางเป็นตัวแทนเชิงคณิตศาสตร์ของสถานะควอนตัม ทิศทางนี้ไม่ใช่ทิศทางจริงๆในทางภูมิศาสตร์ แต่เป็นทิศทางในจำนวนมิติที่ถูกกำหนดโดยฟิสิกส์ของระบบนั้นๆ เช่นสถานะควอนตัมของสปินของอิเล็กตรอนถูกแทนด้วยทิศทางในสองมิติ&lt;/p&gt;
&lt;p&gt;การวัดในทฤษฎีควอนตัมคือการถามระบบฟิสิกส์ว่าสถานะควอนตัมของเธอชี้ไปทางนี้หรือเปล่า? ถ้าทิศที่ถามขนานกับทิศที่มันชี้พอดีก็จะได้คำตอบว่า “ใช่” เสมอ ถ้าทิศที่ถามตั้งฉากกับทิศที่ชี้ก็จะได้คำตอบว่า “ใม่” เสมอ แต่จะเกิดอะไรขึ้นถ้าทิศที่ถามไม่ขนานหรือตั้งฉากเสียทีเดียวล่ะ? ทฤษฎีควอนตัมกำหนดว่าความน่าจะเป็นที่จะได้คำตอบ “ใช่” มีค่าเป็นกำลังสองของโคไซน์ของมุมระหว่างสองทิศนั้น&lt;/p&gt;
&lt;!-- https://stackoverflow.com/questions/24127507/is-it-possible-to-center-tables-in-a-markdown-file --&gt;
&lt;center&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;องศา&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;0&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;30&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;45&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;60&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;90&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;120&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;135&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;150&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;180&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;โคไซน์กำลังสอง&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;3/4&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;1/2&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;1/4&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;1/4&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;1/2&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;3/4&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/center&gt;

&lt;p&gt;สมมติว่าปัญหาหนึ่งมีคำตอบที่เป็นไปได้ 4 คำตอบ ปกติแล้วจะต้องเช็คคำตอบทีละคำตอบ จึงเป็นไปได้ว่าจะต้องเช็คถึง 4 ครั้งกว่าจะได้คำตอบที่ถูกต้อง สำหรับคอมพิวเตอร์ควอนตัม 4 คำตอบนี้แทนด้วย 4 ทิศทางที่ตั้งฉากกัน (จึงมี 4 มิติ) การเช็คคำตอบด้วยการวัดก็ไม่ช่วยอะไรเช่นกัน แต่คอมพิวเตอร์ควอนตัมสามารถเช็คคำตอบโดยปราศจากการวัดได้โดยการเก็บคำตอบ “ใช่” หรือ “ไม่ใช่” ไว้กับตัวมันเอง ซึ่งถ้าเราไม่ไปวัดก็จะไม่รู้ ดูเป็นความสามารถที่ไร้ประโยชน์สิ้นดี แต่ทริคของอัลกอริธึมควอนตัมคือการแปลงการเช็คคำตอบแบบหลังไปเป็นการพลิกสถานะควอนตัมที่ขนานกับทิศของคำตอบ ถ้าคำตอบอยู่ในทิศเหนือ-ใต้ (อย่าลืมว่าเป็นทิศเดียวกันในเรขาคณิตแบบควอนตัม) แล้วสถานะควอนตัมชี้ไปทางเหนือ การเช็คคำตอบก็จะพลิกมันมาทางทิศใต้ สถานะควอนตัมที่ชี้ไปทางใต้ก็จะถูกพลิกไปยังทิศเหนือ และปล่อยทิศทางที่ตั้งฉากกับคำตอบไว้คงเดิม ทริคนี้จึงไม่มีผลต่อความน่าจะเป็นของผลการวัดแต่อย่างใด แต่มันทำให้อัลกอริธึมควอนตัมหาหนึ่งในสี่คำตอบที่ถูกต้องเจอจากการเช็ค (พลิก) เพียงหนึ่งครั้งเท่านั้น! เริ่มต้นด้วยทิศที่มีโอกาสได้คำตอบทุกคำตอบเท่าๆกันหมดคือ 1/4 ทิศนี้ทำมุม 60 องศากับคำตอบ s (solution) เพราะว่าโคไซน์กำลังสองของ 60 องศาเท่ากับ 1/4&lt;/p&gt;
&lt;center&gt;
&lt;img src=&quot;/assets/img/posts/08-2017/grover2a.png&quot; style=&quot;width: 300px;&quot;/&gt;
&lt;/center&gt;

&lt;p&gt;จากนั้นก็เช็คคำตอบเพื่อพลิกมัน&lt;/p&gt;
&lt;center&gt;
&lt;img src=&quot;/assets/img/posts/08-2017/grover2b.png&quot; style=&quot;width: 650px;&quot;/&gt;
&lt;/center&gt;

&lt;p&gt;แล้วก็พลิกอีกครั้งผ่านทิศตั้งต้นก็จะได้คำตอบที่ถูกต้องด้วยความน่าจะเป็น 100%&lt;/p&gt;
&lt;center&gt;
&lt;img src=&quot;/assets/img/posts/08-2017/grover2c.png&quot; style=&quot;width: 650px;&quot;/&gt;
&lt;/center&gt;

&lt;p&gt;เมื่อคำตอบที่เป็นไปได้มีจำนวนเยอะขึ้น ทิศทางตั้งต้นก็จะอยู่ห่างจากทิศของคำตอบมากขึ้น การพลิกสองสเต็ป (จากการเช็คคำตอบ ตามด้วยการพลิกผ่านทิศตั้งต้น) แต่ละครั้งจะทำให้ขยับเข้าใกล้คำตอบมากขึ้นเรื่อยๆ หากทำการคำนวณก็จะประมาณได้ว่าจำนวนครั้งที่อัลกอริธึมนี้ต้องเช็คคำตอบคือรากที่สองของจำนวนคำตอบที่เป็นไปได้ &lt;a href=&quot;#fn5&quot; class=&quot;footnoteRef&quot; id=&quot;fnref5&quot;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; ถ้าคอมพิวเตอร์ธรรมดาต้องเช็คคำตอบหนึ่งล้านครั้ง คอมพิวเตอร์ควอนตัมก็จำเป็นต้องเช็คเพียงแค่หนึ่งพันครั้ง ไม่ได้เร็วขึ้นแบบทวีคูณเหมือนอัลกอริธึมแยกตัวประกอบของชอร์แต่ก็ช่วยได้เยอะ&lt;/p&gt;
&lt;p&gt;ในมุมมองหนึ่ง สิ่งที่อัลกอริธึมควอนตัมทำจึงเป็นเพียงการขยับลูกศรไปมา ซึ่งพูดเหมือนง่ายแต่เป็นความท้าทายมาก ถ้าอยากรู้ว่าการควบคุมสถานะควอนตัมนั้นทำกันในแลบได้อย่างไรก็สามารถอ่านบทความที่เขียนและเรียบเรียงโดยนักศึกษาและนักวิทยาศาสตร์ไทยท่านอื่นๆ ได้ใน &lt;a href=&quot;http://www.ebooks.in.th/ebook/45594/&quot;&gt;&lt;em&gt;รูป รส กลิ่น เสียง สัมผัส ไอทีควอนตัม (๓): “คอมพิวเตอร์เชิงควอนตัม”&lt;/em&gt;&lt;/a&gt; ครับ&lt;/p&gt;
&lt;h1 id=&quot;อางอง&quot;&gt;อ้างอิง&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Cristopher Moore และ Stephen Mertens, “Quantum Computation” ใน &lt;em&gt;The Nature of Computation&lt;/em&gt;, Cambridge University Press (2011).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scott Aaronson, “Crypto” ใน &lt;em&gt;Quantum Computing Since Democritus&lt;/em&gt;, Cambridge University Press (2013).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;มาจากตัวอักษรแรกของชื่อผู้ค้นพบ Ron Rivest, Adi Shamir, และ Leonard Adleman&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn2&quot;&gt;&lt;p&gt;ถ้าสมมติว่าคอมพิวเตอร์ควอนตัมมีความเร็ว CPU พอๆกับของคอมพิวเตอร์ปัจจุบัน&lt;a href=&quot;#fnref2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn3&quot;&gt;&lt;p&gt;Thomas Monz et al., “&lt;a href=&quot;http://science.sciencemag.org/content/351/6277/1068&quot;&gt;Realization of a scalable Shor algorithm&lt;/a&gt;” &lt;em&gt;Science&lt;/em&gt; 351 1068 (2016).&lt;a href=&quot;#fnref3&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn4&quot;&gt;&lt;p&gt;สำหรับผู้รู้ทฤษฎีควอนตัม ที่พูดไปไม่ใช่ความจริงทั้งหมดเพราะมุมนี้สามารถเป็นจำนวนเชิงซ้อนได้! แต่ทุกมุมในบทความนี้เป็นจำนวนจริง&lt;a href=&quot;#fnref4&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn5&quot;&gt;&lt;p&gt;จริงๆคือ &lt;span class=&quot;math&quot;&gt;\(\pi/4\)&lt;/span&gt; คูณรากที่สองของจำนวนคำตอบที่เป็นไปได้&lt;a href=&quot;#fnref5&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
 </entry>
 
 <entry>
   <title>ควอนตัมฟิสิกส์สำหรับทารก</title>
   <link href="/quantum-for-babies.html"/>
   <updated>2016-12-27T00:00:00+00:00</updated>
   <id>h/quantum-for-babies</id>
   <content type="html">&lt;p&gt;อาจจะเคยเห็นหนังสือ &lt;em&gt;Quantum Physics for Babies&lt;/em&gt; ที่ Mark Zuckerberg อ่านให้ลูกฟัง&lt;/p&gt;
&lt;center&gt;
&lt;img src=&quot;/assets/img/posts/zuckerberg.jpg&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;หรือที่ “Antman” Paul Rudd ใช้เป็นที่พึ่งเพื่อหาวิธีเอาชนะ Stephen Hawking ในเกมหมากรุกควอนตัม&lt;/p&gt;
&lt;center&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Hi0BzqV_b44?t=5m4s&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;

&lt;p&gt;&lt;em&gt;Quantum Physics for Babies&lt;/em&gt; เป็นหนังสือที่ &lt;a href=&quot;https://csferrie.com/&quot;&gt;Chris Ferrie&lt;/a&gt; เขียนขึ้นมาให้ลูกของเขาเองระหว่างที่ทำงานเป็นโพสต์ด็อก(นักวิจัยหลังปริญญาเอก)ที่ University of New Mexico และเรียนรู้วิธี&lt;a href=&quot;https://csferrie.com/2016/11/19/quantum-physics-for-babies/&quot;&gt;ตีพิมพ์ด้วยตนเอง&lt;/a&gt; (เพราะจะได้เล่มตัวอย่างฟรี ถูกกว่าทำเล่มเอง) แล้วดันฮิตติดชาร์ทขึ้นมา คนขอเอาไปแปลเป็นภาษาจีน ภาษาเวียตนาม คราวนี้มีคนไทยคนหนึ่งทำงานร่วมกับเขาที่นิวเม็กซิโก &lt;em&gt;ควอนตัมฟิสิกส์สำหรับทารก&lt;/em&gt;ฉบับภาษาไทยจึงถือกำเนิดขึ้น&lt;/p&gt;
&lt;center&gt;
&lt;blockquote class=&quot;imgur-embed-pub&quot; lang=&quot;en&quot; data-id=&quot;a/D7MlQ&quot;&gt;
&lt;a href=&quot;//imgur.com/D7MlQ&quot;&gt;Quantum Physics for Babies (THAI)&lt;/a&gt;
&lt;/blockquote&gt;&lt;script async src=&quot;//s.imgur.com/min/embed.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/center&gt;

&lt;p&gt;คริสมอบสิทธิ์เกี่ยวกับ&lt;em&gt;ควอนตัมฟิสิกส์สำหรับทารก&lt;/em&gt;ฉบับภาษาไทยทั้งหมดให้กับผม (ผู้แปล) จะเอาไปให้สำนักพิมพ์ก็ได้ ถ้าหาสำนักพิมพ์ไม่ได้จะเอาไปแจกฟรีก็ได้ หลังจากรอคำตอบจากคนรู้จักที่ติดต่อให้ช่วยหาสำนักพิมพ์มาพักใหญ่ๆ ผมก็คิดว่าถึงเวลาเอามาแจกฟรีเป็นของขวัญปีใหม่ได้แล้ว สามารถดาวน์โหลดได้เลยที่&lt;a href=&quot;https://github.com/Ninnat/quantum_physics_for_babies_THAI/releases&quot;&gt;ลิงค์นี้&lt;/a&gt; จะเอาไปปรินต์, ดัดแปลง, แชร์ไฟล์นี้หรือไฟล์ที่ได้รับการดัดแปลงให้ลูกเล็กเด็กแดงก็ได้เลยตามสบาย แต่ไม่อนุญาตให้นำไปใช้ทางการค้าและต้องให้เครดิตกับคริสและผม (นินนาท แดงเนียม) เสมอ&lt;/p&gt;
&lt;p&gt;สวัสดีปีใหม่ครับ&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>First Post</title>
   <link href="/first-post.html"/>
   <updated>2016-07-20T00:00:00+00:00</updated>
   <id>h/first-post</id>
   <content type="html">&lt;p&gt;First post on my Jekyll-powered blog!&lt;/p&gt;
&lt;p&gt;I’ve been blogging on &lt;a href=&quot;https://ninnatdangniam.wordpress.com/&quot;&gt;Wordpress&lt;/a&gt; for a long time (in Thai) but despite how easy it is to setup the blog, there isn’t much I can do without paying. Now you can follow &lt;a href=&quot;https://ninnat.github.io/README.html&quot;&gt;what I did&lt;/a&gt; and get your own blog hosted on a free (public) Git repository.&lt;/p&gt;
&lt;p&gt;Finding a blog that functions without a hassle is even harder if you are a math blogger, but that is not a problem here. Equations are written in &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; and displayed using &lt;a href=&quot;https://www.mathjax.org/&quot;&gt;MathJax&lt;/a&gt;. Math in a paragraph (in-line math) is delimited by &lt;code&gt;$...$&lt;/code&gt;, while displaying math in its own paragraph uses &lt;code&gt;$$...$$&lt;/code&gt;. Use &lt;code&gt;\begin{aligned}...\end{aligned}&lt;/code&gt; for aligned equations and &lt;code&gt;\begin{aligned}...\end{aligned}&lt;/code&gt; for numbered aligned equations. (Both delimiters have to be placed inside &lt;code&gt;$$...$$&lt;/code&gt;.) A quick guide on MathJax syntax can be found &lt;a href=&quot;http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s test this by writing the Maxwell’s equations in cgs units:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[
\begin{align}
\nabla \cdot \mathbf{E} &amp;amp;= 4\pi \rho , \\
\nabla \times \mathbf{E} &amp;amp;= -\frac{1}{c} \frac{\partial \mathbf{B}}{\partial t} , \\
\nabla \cdot \mathbf{B} &amp;amp;= 0, \\
\nabla \times \mathbf{B} &amp;amp;= \frac{4\pi}{c} \mathbf{J} + \frac{1}{c} \frac{\partial \mathbf{E}}{\partial t}.
\end{align}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Another indispensable feature that I’ve always longed for is the popup footnote. Digital footnotes today are often still implemented as if they are in print media. You follow the link to the bottom of the post and then have to find a way back to where you were in the main text, thus breaking the flow of reading. (And maybe it’s just me but it’s tempting to take a peek at footnotes even when I know they aren’t necessary to the main text.) A much better way to implement a digital footnote is using, for example, &lt;a href=&quot;http://www.bigfootjs.com/&quot;&gt;Bigfoot&lt;/a&gt; like this.&lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; All you have to do is pasting the css into &lt;code&gt;/assets/css/style.css&lt;/code&gt;, putting the javascript file to, say, &lt;code&gt;/assets/js&lt;/code&gt; and calling it with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;/assets/js/bigfoot.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    $.bigfoot({
        activateCallback: function($popover, $button) {
                if (MathJax &amp;amp;&amp;amp; !$button.data(&amp;#39;mathjax-processed&amp;#39;)) {
                        var content_wrapper = $popover.find(&amp;#39;.bigfoot-footnote__content&amp;#39;)[0];
                        MathJax.Hub.Queue([&amp;#39;Typeset&amp;#39;, MathJax.Hub, content_wrapper]);
                        MathJax.Hub.Queue(function () {
                                $button.attr(&amp;#39;data-bigfoot-footnote&amp;#39;, content_wrapper.innerHTML);
                                $button.data(&amp;#39;mathjax-processed&amp;#39;, true);
                        });
                }
        }
    });
&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;within &lt;code&gt;/_includes/javascript.html&lt;/code&gt;. For searchability, I also choose to show footnotes in the footer.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;3 Jan 2017&lt;/em&gt;: &lt;a href=&quot;https://esham.io/2014/07/mathjax-and-bigfoot&quot;&gt;Benjamin Esham&lt;/a&gt; provides a code to enable MathJax in the footnotes.&lt;/p&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;Alan Jacobs, &lt;a href=&quot;http://www.theatlantic.com/technology/archive/2012/03/the-technology-of-a-better-footnote/254403/&quot;&gt;“The Technology of a Better Footnote,”&lt;/a&gt; &lt;em&gt;The Atlantic&lt;/em&gt;, March 2012.&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
 </entry>
 
 
</feed>
